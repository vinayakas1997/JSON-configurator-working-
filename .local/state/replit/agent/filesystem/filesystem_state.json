{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# PLC Configuration Builder\n\n## Overview\n\nThis is a full-stack web application for building and managing PLC (Programmable Logic Controller) configuration files. The application provides a user-friendly interface for creating configuration files that map PLC registers to OPC UA registers, with support for multiple PLCs and different data types. Users can manually configure address mappings or import them from CSV/TXT files, then export the complete configuration as JSON files.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming (light/dark mode support)\n- **State Management**: React hooks for local state, TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Internationalization**: Custom translation system supporting English and Japanese languages\n- **File Processing**: PapaParse for CSV file parsing and processing\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Session Storage**: Connect-pg-simple for PostgreSQL session storage\n- **API Design**: RESTful API endpoints for PLC configuration management\n- **Data Validation**: Zod schemas for runtime type checking and validation\n- **Development**: Hot module replacement with Vite in development mode\n\n### Data Storage Design\n- **Primary Database**: SQLite with better-sqlite3 driver for persistent storage\n- **Schema**: Two main tables - users and plc_configurations (SQLite compatible)\n- **Configuration Storage**: JSON text storage with automatic serialization/deserialization\n- **Type System**: Domain types (objects) for API/business logic, database types (strings) for storage layer\n- **Data Persistence**: All configurations survive application restarts and deployments\n\n### Authentication & Authorization\n- **Session Management**: Express sessions with PostgreSQL storage\n- **User Model**: Simple username/password authentication system\n- **Access Control**: Basic user-based access to PLC configurations\n\n### Core Features\n- **Configuration Builder**: Interactive form-based configuration creation\n- **File Import**: CSV/TXT file upload and parsing for address mappings\n- **Data Validation**: Comprehensive validation for IP addresses, URLs, and configuration data\n- **Export Functionality**: JSON export of complete PLC configurations\n- **Multi-language Support**: English and Japanese interface translations\n- **Responsive Design**: Mobile-friendly interface with collapsible sidebar\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting via `@neondatabase/serverless`\n- **Drizzle Kit**: Database migrations and schema management tool\n\n### UI/UX Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n### Data Processing\n- **PapaParse**: CSV parsing library for file import functionality\n- **Zod**: TypeScript-first schema validation library\n- **date-fns**: Date manipulation and formatting utilities\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **TanStack Query**: Data fetching and caching library\n- **Replit Integration**: Development environment integration tools\n\n### Build & Deployment\n- **ESBuild**: JavaScript bundler for production builds\n- **TypeScript**: Static type checking across the entire codebase\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer","size_bytes":3831},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPlcConfigDomainSchema, configFileSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Get all PLC configurations\n  app.get(\"/api/plc-configurations\", async (req, res) => {\n    try {\n      const configurations = await storage.getAllPlcConfigurations();\n      res.json(configurations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch configurations\" });\n    }\n  });\n\n  // Get a specific PLC configuration\n  app.get(\"/api/plc-configurations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const configuration = await storage.getPlcConfiguration(id);\n      \n      if (!configuration) {\n        return res.status(404).json({ message: \"Configuration not found\" });\n      }\n      \n      res.json(configuration);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch configuration\" });\n    }\n  });\n\n  // Create a new PLC configuration\n  app.post(\"/api/plc-configurations\", async (req, res) => {\n    try {\n      const validatedData = insertPlcConfigDomainSchema.parse(req.body);\n      \n      // config_data validation is already included in insertPlcConfigDomainSchema\n      \n      const configuration = await storage.createPlcConfiguration(validatedData);\n      res.status(201).json(configuration);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create configuration\" });\n    }\n  });\n\n  // Update a PLC configuration\n  app.put(\"/api/plc-configurations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPlcConfigDomainSchema.partial().parse(req.body);\n      \n      // config_data validation is already included in insertPlcConfigDomainSchema\n      \n      const configuration = await storage.updatePlcConfiguration(id, validatedData);\n      \n      if (!configuration) {\n        return res.status(404).json({ message: \"Configuration not found\" });\n      }\n      \n      res.json(configuration);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update configuration\" });\n    }\n  });\n\n  // Delete a PLC configuration\n  app.delete(\"/api/plc-configurations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deletePlcConfiguration(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Configuration not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete configuration\" });\n    }\n  });\n\n  // Validate configuration data\n  app.post(\"/api/plc-configurations/validate\", async (req, res) => {\n    try {\n      const validatedData = configFileSchema.parse(req.body);\n      res.json({ valid: true, data: validatedData });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          valid: false,\n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ valid: false, message: \"Validation failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3686},"server/storage.ts":{"content":"import { type User, type InsertUser, type PlcConfiguration, type InsertPlcConfigurationDomain } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getPlcConfiguration(id: string): Promise<PlcConfiguration | undefined>;\n  getAllPlcConfigurations(): Promise<PlcConfiguration[]>;\n  createPlcConfiguration(config: InsertPlcConfigurationDomain): Promise<PlcConfiguration>;\n  updatePlcConfiguration(id: string, config: Partial<InsertPlcConfigurationDomain>): Promise<PlcConfiguration | undefined>;\n  deletePlcConfiguration(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private plcConfigurations: Map<string, PlcConfiguration>;\n\n  constructor() {\n    this.users = new Map();\n    this.plcConfigurations = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getPlcConfiguration(id: string): Promise<PlcConfiguration | undefined> {\n    return this.plcConfigurations.get(id);\n  }\n\n  async getAllPlcConfigurations(): Promise<PlcConfiguration[]> {\n    return Array.from(this.plcConfigurations.values());\n  }\n\n  async createPlcConfiguration(insertConfig: InsertPlcConfigurationDomain): Promise<PlcConfiguration> {\n    const id = randomUUID();\n    const config: PlcConfiguration = {\n      ...insertConfig,\n      id,\n      created_at: new Date().toISOString(),\n      description: insertConfig.description || null,\n    };\n    this.plcConfigurations.set(id, config);\n    return config;\n  }\n\n  async updatePlcConfiguration(id: string, updateData: Partial<InsertPlcConfigurationDomain>): Promise<PlcConfiguration | undefined> {\n    const existingConfig = this.plcConfigurations.get(id);\n    if (!existingConfig) {\n      return undefined;\n    }\n    \n    const updatedConfig: PlcConfiguration = {\n      ...existingConfig,\n      ...updateData,\n    };\n    this.plcConfigurations.set(id, updatedConfig);\n    return updatedConfig;\n  }\n\n  async deletePlcConfiguration(id: string): Promise<boolean> {\n    return this.plcConfigurations.delete(id);\n  }\n}\n\nimport { SqliteStorage } from \"./sqlite-storage\";\n\nexport const storage = new SqliteStorage();\n","size_bytes":2726},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const addressMappingSchema = z.object({\n  plc_reg_add: z.string().min(1, \"PLC register address is required\"),\n  data_type: z.enum([\"int16\", \"int32\", \"float32\", \"bool\", \"string\", \"CHANNEL\", \"BOOL\", \"WORD\", \"UDINT\", \"DWORD\", \"INT\", \"REAL\", \"LREAL\", \"modified channel\"]),\n  opcua_reg_add: z.string().min(1, \"OPC UA register address is required\"),\n  description: z.string().optional(),\n  bit_list: z.array(z.number()).optional(), // Array of bit positions for efficient highlighting\n  metadata: z.object({\n    bit_count: z.number(),\n    bit_mappings: z.record(z.object({\n      address: z.string(),\n      description: z.string(),\n      bit_position: z.number()\n    }))\n  }).optional()\n});\n\nexport const plcConfigSchema = z.object({\n  plc_name: z.string().min(1, \"PLC name is required\"),\n  plc_ip: z.string().ip(\"Invalid IP address\"),\n  opcua_url: z.string().url(\"Invalid OPC UA URL\"),\n  address_mappings: z.array(addressMappingSchema)\n});\n\nexport const configFileSchema = z.object({\n  plcs: z.array(plcConfigSchema)\n});\n\n// SQLite tables for the actual implementation\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey().$defaultFn(() => crypto.randomUUID()),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const plcConfigurations = sqliteTable(\"plc_configurations\", {\n  id: text(\"id\").primaryKey().$defaultFn(() => crypto.randomUUID()),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  config_data: text(\"config_data\").notNull(), // JSON stored as text\n  created_at: text(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\n// Database insert schema (config_data as string)\nexport const insertPlcConfigSchema = createInsertSchema(plcConfigurations).omit({\n  id: true,\n  created_at: true,\n});\n\n// Domain insert schema (config_data as object)\nexport const insertPlcConfigDomainSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().nullable().optional(),\n  config_data: configFileSchema\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Database row type (config_data is string in SQLite)\nexport type PlcConfigurationRow = typeof plcConfigurations.$inferSelect;\n\n// Domain type (config_data is parsed ConfigFile object) \nexport type PlcConfiguration = Omit<PlcConfigurationRow, 'config_data'> & {\n  config_data: ConfigFile;\n};\n\n// Database insert type (string)\nexport type InsertPlcConfiguration = z.infer<typeof insertPlcConfigSchema>;\n// Domain insert type (object)\nexport type InsertPlcConfigurationDomain = z.infer<typeof insertPlcConfigDomainSchema>;\nexport type AddressMapping = z.infer<typeof addressMappingSchema>;\nexport type PlcConfig = z.infer<typeof plcConfigSchema>;\nexport type ConfigFile = z.infer<typeof configFileSchema>;\n","size_bytes":3116},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(214, 100%, 40%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(159, 70%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(214, 100%, 40%);\n  --radius: 8px;\n  --font-sans: Inter, system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(214, 100%, 50%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(159, 70%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(214, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .upload-zone {\n    border: 2px dashed hsl(var(--border));\n    transition: all 0.3s ease;\n  }\n  \n  .upload-zone:hover {\n    border-color: hsl(var(--primary));\n    background-color: hsl(var(--primary) / 0.05);\n  }\n  \n  .progress-bar {\n    width: 0%;\n    transition: width 1s ease-in-out;\n  }\n  \n  \n  .expandable-section {\n    transition: max-height 0.3s ease-in-out;\n    overflow: hidden;\n  }\n  \n  .table-row:hover {\n    background-color: hsl(var(--muted));\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.3s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n  \n  .slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n}\n","size_bytes":2633},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/address-mappings-table.tsx":{"content":"import { useState, useEffect, useMemo, Fragment } from \"react\";\nimport { Trash2, Plus, ChevronDown, ChevronRight, Upload, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateOpcuaName } from \"@/lib/plc-parser\";\nimport Papa from \"papaparse\";\nimport type { AddressMapping } from \"@shared/schema\";\n\ninterface AddressMappingsTableProps {\n  mappings: AddressMapping[];\n  onMappingsChange: (mappings: AddressMapping[]) => void;\n  selectedMemoryAreas?: Set<string>;\n  onSelectedRegistersChange?: (selectedRegisters: Set<number>) => void;\n  plcNo?: number | string;\n  searchTerm?: string;\n  deselectedKeys?: Set<string>;\n  onDeselectedKeysChange?: (keys: Set<string>) => void;\n}\n\n// 16-bit grid component for boolean channel visualization\nfunction BooleanChannelGrid({ \n  plcAddress, \n  selectedBits = [], \n  onBitToggle \n}: { \n  plcAddress: string; \n  selectedBits?: number[]; \n  onBitToggle?: (bit: number) => void; \n}) {\n  // Extract base address and determine which bits are used\n  const baseAddress = plcAddress.split('.')[0];\n  const usedBits = selectedBits;\n\n  return (\n    <div className=\"mt-3 p-3 bg-green-50 dark:bg-green-900/20 rounded border-l-4 border-green-500\">\n      <h4 className=\"text-sm font-medium text-green-800 dark:text-green-200 mb-2\">\n        16-bit Channel Visualization - Base: {baseAddress}\n      </h4>\n      <div className=\"space-y-1\">\n        {/* Top row: bits 15-8 */}\n        <div className=\"flex space-x-1\">\n          <span className=\"text-xs font-mono text-muted-foreground w-8\">15</span>\n          {Array.from({ length: 8 }, (_, i) => {\n            const bitIndex = 15 - i;\n            const isUsed = usedBits.includes(bitIndex);\n            return (\n              <button\n                key={bitIndex}\n                onClick={() => onBitToggle?.(bitIndex)}\n                className={`w-6 h-6 text-xs font-mono border rounded ${\n                  isUsed \n                    ? 'bg-green-500 text-white border-green-600' \n                    : 'bg-gray-100 dark:bg-gray-700 text-gray-500 border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'\n                }`}\n                data-testid={`bit-${baseAddress}-${bitIndex}`}\n              >\n                {bitIndex}\n              </button>\n            );\n          })}\n          <span className=\"text-xs font-mono text-muted-foreground w-8\">8</span>\n        </div>\n        {/* Bottom row: bits 7-0 */}\n        <div className=\"flex space-x-1\">\n          <span className=\"text-xs font-mono text-muted-foreground w-8\">7</span>\n          {Array.from({ length: 8 }, (_, i) => {\n            const bitIndex = 7 - i;\n            const isUsed = usedBits.includes(bitIndex);\n            return (\n              <button\n                key={bitIndex}\n                onClick={() => onBitToggle?.(bitIndex)}\n                className={`w-6 h-6 text-xs font-mono border rounded ${\n                  isUsed \n                    ? 'bg-green-500 text-white border-green-600' \n                    : 'bg-gray-100 dark:bg-gray-700 text-gray-500 border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'\n                }`}\n                data-testid={`bit-${baseAddress}-${bitIndex}`}\n              >\n                {bitIndex}\n              </button>\n            );\n          })}\n          <span className=\"text-xs font-mono text-muted-foreground w-8\">0</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function AddressMappingsTable({ mappings, onMappingsChange, selectedMemoryAreas = new Set(), onSelectedRegistersChange, plcNo = 1, searchTerm = \"\", deselectedKeys = new Set(), onDeselectedKeysChange }: AddressMappingsTableProps) {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  \n  // State for tracking selected registers (initially all selected)\n  const [selectedRegisters, setSelectedRegisters] = useState<Set<number>>(new Set());\n  const [expandedBoolChannels, setExpandedBoolChannels] = useState<Set<number>>(new Set());\n  const [modifiedChannelBits, setModifiedChannelBits] = useState<Map<number, Set<number>>>(new Map());\n  const [modifiedChannelComments, setModifiedChannelComments] = useState<Map<number, string>>(new Map());\n  \n  // Group deselect states\n  const [groupDeselectExpanded, setGroupDeselectExpanded] = useState<boolean>(false);\n  const [manualDeselectInput, setManualDeselectInput] = useState<string>(\"\");\n  const [csvParsedCount, setCsvParsedCount] = useState<number>(0);\n\n  // Helper function to identify BOOL CHANNEL entries\n  const isBoolChannel = (mapping: AddressMapping) => {\n    return (mapping.data_type === 'BOOL' || mapping.data_type === 'CHANNEL') && mapping.opcua_reg_add.endsWith('_BC');\n  };\n\n  // Helper function to identify MODIFIED CHANNEL entries (for display purposes)\n  const isModifiedChannel = (mapping: AddressMapping) => {\n    return mapping.data_type === 'modified channel';\n  };\n  \n  // Helper function to check if a BOOL entry was created by a modified channel\n  const isBoolFromModifiedChannel = (mapping: AddressMapping, modifiedChannelIndex: number): boolean => {\n    if (mapping.data_type !== 'BOOL' || !mapping.plc_reg_add.includes('.')) return false;\n    \n    const modifiedMapping = mappings[modifiedChannelIndex];\n    if (!modifiedMapping || !isModifiedChannel(modifiedMapping)) return false;\n    \n    const baseAddress = modifiedMapping.plc_reg_add;\n    return mapping.plc_reg_add.startsWith(baseAddress + '.');\n  };\n\n  // Efficient helper using bit_list attribute instead of parsing addresses\n  const extractUsedBits = (channelAddress: string): number[] => {\n    const baseAddress = channelAddress.split('.')[0];\n    \n    // Find the mapping that corresponds to this channel address\n    const channelMapping = mappings.find(mapping => \n      mapping.plc_reg_add === baseAddress && (isBoolChannel(mapping) || isModifiedChannel(mapping))\n    );\n    \n    if (channelMapping && channelMapping.bit_list && Array.isArray(channelMapping.bit_list)) {\n      // Use efficient bit_list attribute - no parsing needed!\n      return channelMapping.bit_list.filter(bit => bit >= 0 && bit <= 15);\n    }\n    \n    // Fallback: extract from related BOOL entries for backward compatibility\n    const usedBits: number[] = [];\n    mappings.forEach((mapping) => {\n      if (mapping.data_type === 'BOOL' && mapping.plc_reg_add.startsWith(baseAddress + '.')) {\n        if (mapping.bit_list && Array.isArray(mapping.bit_list)) {\n          // Use bit_list if available\n          usedBits.push(...mapping.bit_list.filter(bit => bit >= 0 && bit <= 15));\n        } else {\n          // Parse address as fallback\n          const bitPart = mapping.plc_reg_add.split('.')[1];\n          if (bitPart) {\n            const bitNumber = parseInt(bitPart);\n            if (!isNaN(bitNumber) && bitNumber >= 0 && bitNumber <= 15) {\n              usedBits.push(bitNumber);\n            }\n          }\n        }\n      }\n    });\n    \n    return Array.from(new Set(usedBits)); // Remove duplicates\n  };\n\n  // Efficient helper using bit_list attribute instead of reparsing addresses\n  const getExistingBitData = useMemo(() => {\n    const addressToBitsMap = new Map<string, { boolBits: Set<number>, modifiedBits: Set<number> }>();\n    \n    mappings.forEach((mapping, index) => {\n      const mappingBaseAddress = mapping.plc_reg_add.split('.')[0];\n      \n      if (!addressToBitsMap.has(mappingBaseAddress)) {\n        addressToBitsMap.set(mappingBaseAddress, { boolBits: new Set(), modifiedBits: new Set() });\n      }\n      \n      const bitData = addressToBitsMap.get(mappingBaseAddress)!;\n      \n      // Use bit_list attribute for efficient bit extraction - no parsing needed!\n      if (mapping.bit_list && Array.isArray(mapping.bit_list)) {\n        mapping.bit_list.forEach((bit: number) => {\n          if (typeof bit === 'number' && bit >= 0 && bit <= 15) {\n            if (isBoolChannel(mapping)) {\n              bitData.boolBits.add(bit);\n            } else if (isModifiedChannel(mapping)) {\n              bitData.modifiedBits.add(bit);\n            } else if (mapping.data_type === 'BOOL') {\n              bitData.boolBits.add(bit);\n            }\n          }\n        });\n      }\n      \n      // Fallback: Extract bits from metadata (for backward compatibility)\n      if (!mapping.bit_list) {\n        if (isBoolChannel(mapping) && (mapping as any).metadata?.bit_mappings) {\n          const bitMappings = (mapping as any).metadata.bit_mappings;\n          Object.values(bitMappings).forEach((bitInfo: any) => {\n            if (typeof bitInfo.bit_position === 'number' && bitInfo.bit_position >= 0 && bitInfo.bit_position <= 15) {\n              bitData.boolBits.add(bitInfo.bit_position);\n            }\n          });\n        }\n        \n        if (isModifiedChannel(mapping) && (mapping as any).metadata?.bit_mappings) {\n          const bitMappings = (mapping as any).metadata.bit_mappings;\n          Object.values(bitMappings).forEach((bitInfo: any) => {\n            if (typeof bitInfo.bit_position === 'number' && bitInfo.bit_position >= 0 && bitInfo.bit_position <= 15) {\n              bitData.modifiedBits.add(bitInfo.bit_position);\n            }\n          });\n        }\n        \n        // Extract bits from individual BOOL entries (parsing fallback)\n        if (mapping.data_type === 'BOOL' && mapping.plc_reg_add.includes('.')) {\n          const bitPart = mapping.plc_reg_add.split('.')[1];\n          if (bitPart) {\n            const bitNumber = parseInt(bitPart);\n            if (!isNaN(bitNumber) && bitNumber >= 0 && bitNumber <= 15) {\n              bitData.boolBits.add(bitNumber);\n            }\n          }\n        }\n      }\n    });\n    \n    return addressToBitsMap;\n  }, [mappings]);\n  \n  // Helper to count total selected bits in all modified channels\n  const getTotalModifiedChannelBits = (): number => {\n    let totalBits = 0;\n    mappings.forEach((mapping, index) => {\n      if (isModifiedChannel(mapping) && selectedRegisters.has(index)) {\n        const selectedBits = modifiedChannelBits.get(index) || new Set<number>();\n        totalBits += selectedBits.size;\n      }\n    });\n    return totalBits;\n  };\n\n  // Helper to get existing bits for a specific address excluding current mapping\n  const getExistingBitsForAddress = (baseAddress: string, currentIndex: number): { boolBits: number[], modifiedBits: number[] } => {\n    const bitData = getExistingBitData.get(baseAddress);\n    if (!bitData) {\n      return { boolBits: [], modifiedBits: [] };\n    }\n    \n    // Get current mapping's selected bits to exclude from modified bits (using bit_list)\n    const currentMapping = mappings[currentIndex];\n    const currentModifiedBits = new Set<number>();\n    if (isModifiedChannel(currentMapping)) {\n      if (currentMapping.bit_list && Array.isArray(currentMapping.bit_list)) {\n        // Use efficient bit_list attribute\n        currentMapping.bit_list.forEach((bit: number) => currentModifiedBits.add(bit));\n      } else if ((currentMapping as any).metadata?.bit_mappings) {\n        // Fallback to metadata parsing\n        const bitMappings = (currentMapping as any).metadata.bit_mappings;\n        Object.values(bitMappings).forEach((bitInfo: any) => {\n          if (typeof bitInfo.bit_position === 'number') {\n            currentModifiedBits.add(bitInfo.bit_position);\n          }\n        });\n      }\n    }\n    \n    // Filter out current mapping's bits from modified bits\n    const filteredModifiedBits = Array.from(bitData.modifiedBits).filter(bit => !currentModifiedBits.has(bit));\n    \n    return {\n      boolBits: Array.from(bitData.boolBits),\n      modifiedBits: filteredModifiedBits\n    };\n  };\n\n  // Helper function to classify memory area from mapping\n  const getMemoryAreaFromMapping = (mapping: AddressMapping): string => {\n    const firstChar = mapping.plc_reg_add.charAt(0).toUpperCase();\n    // Group I and O into I/O, and numeric addresses as I/O\n    if (firstChar === 'I' || firstChar === 'O' || /^\\d/.test(mapping.plc_reg_add)) {\n      return 'I/O';\n    }\n    return firstChar;\n  };\n\n  // Create filtered and searched visible mappings\n  const visibleMappings = useMemo(() => {\n    const filteredMappings = mappings.map((mapping, originalIndex) => ({ mapping, originalIndex }))\n      .filter(({ mapping }) => {\n        // Always show empty addresses (new mappings)\n        if (!mapping.plc_reg_add || mapping.plc_reg_add.trim() === '') return true;\n        const memoryArea = getMemoryAreaFromMapping(mapping);\n        return selectedMemoryAreas.has(memoryArea);\n      });\n\n    // Apply search filtering if searchTerm exists\n    if (!searchTerm || searchTerm.trim() === '') {\n      return filteredMappings;\n    }\n\n    const searchTermLower = searchTerm.toLowerCase();\n    const matchingMappings: Array<{ mapping: AddressMapping; originalIndex: number; isMatch: boolean }> = [];\n\n    filteredMappings.forEach(({ mapping, originalIndex }) => {\n      const plcRegAdd = mapping.plc_reg_add.toLowerCase();\n      const opcuaRegAdd = mapping.opcua_reg_add.toLowerCase();\n      const description = (mapping.description || '').toLowerCase();\n      \n      const isMatch = plcRegAdd.includes(searchTermLower) || \n                      opcuaRegAdd.includes(searchTermLower) || \n                      description.includes(searchTermLower);\n      \n      matchingMappings.push({ mapping, originalIndex, isMatch });\n    });\n\n    // Sort: matches first, then non-matches\n    matchingMappings.sort((a, b) => {\n      if (a.isMatch && !b.isMatch) return -1;\n      if (!a.isMatch && b.isMatch) return 1;\n      return 0;\n    });\n\n    // Return in the original format\n    return matchingMappings.map(({ mapping, originalIndex }) => ({ mapping, originalIndex }));\n  }, [mappings, selectedMemoryAreas, searchTerm]);\n\n  // Initialize registers as selected only on first render\n  useEffect(() => {\n    const visibleIndices = new Set(visibleMappings.map(({ originalIndex }) => originalIndex));\n    // Only initialize if selectedRegisters is empty to preserve user selections\n    setSelectedRegisters(prev => prev.size === 0 ? visibleIndices : prev);\n  }, [visibleMappings.length]); // Only depend on length changes, not content changes\n\n  // Sync deselectedKeys with selectedRegisters whenever mappings or deselectedKeys change\n  useEffect(() => {\n    if (deselectedKeys.size > 0) {\n      updateSelectedRegistersFromDeselected(deselectedKeys);\n    }\n  }, [mappings, deselectedKeys]);\n\n  // Notify parent when selectedRegisters changes\n  useEffect(() => {\n    if (onSelectedRegistersChange) {\n      onSelectedRegistersChange(selectedRegisters);\n    }\n  }, [selectedRegisters, onSelectedRegistersChange]);\n\n  // Derive bit states directly from current mappings (more reliable than useEffect)\n  const channelBitStates = useMemo(() => {\n    const newBitStates = new Map<number, Set<number>>();\n    mappings.forEach((mapping, index) => {\n      if (isBoolChannel(mapping)) {\n        const usedBits = extractUsedBits(mapping.plc_reg_add);\n        newBitStates.set(index, new Set(usedBits));\n      }\n    });\n    return newBitStates;\n  }, [JSON.stringify(mappings)]);\n\n  // Initialize modified channel bits from metadata when mappings change\n  useEffect(() => {\n    const newModifiedBits = new Map<number, Set<number>>();\n    const newModifiedComments = new Map<number, string>();\n    \n    mappings.forEach((mapping, index) => {\n      if (isModifiedChannel(mapping)) {\n        // Initialize bits from metadata\n        const metadata = (mapping as any).metadata;\n        if (metadata && metadata.bit_mappings) {\n          const bits = new Set<number>();\n          Object.values(metadata.bit_mappings).forEach((bitInfo: any) => {\n            if (typeof bitInfo.bit_position === 'number' && bitInfo.bit_position >= 0 && bitInfo.bit_position <= 15) {\n              bits.add(bitInfo.bit_position);\n            }\n          });\n          newModifiedBits.set(index, bits);\n        }\n        \n        // Initialize comments from description\n        if (mapping.description) {\n          newModifiedComments.set(index, mapping.description);\n        }\n      }\n    });\n    \n    setModifiedChannelBits(newModifiedBits);\n    setModifiedChannelComments(newModifiedComments);\n  }, [mappings]);\n\n  const toggleRegisterSelection = (index: number) => {\n    const newSelected = new Set(selectedRegisters);\n    if (newSelected.has(index)) {\n      newSelected.delete(index);\n    } else {\n      newSelected.add(index);\n    }\n    setSelectedRegisters(newSelected);\n  };\n\n  const toggleBoolChannelExpansion = (index: number) => {\n    const newExpanded = new Set(expandedBoolChannels);\n    if (newExpanded.has(index)) {\n      newExpanded.delete(index);\n    } else {\n      newExpanded.add(index);\n    }\n    setExpandedBoolChannels(newExpanded);\n  };\n\n  // Handler for modified channel bit selection - updates metadata with bit_mappings\n  const toggleModifiedChannelBit = (mappingIndex: number, bitIndex: number) => {\n    setModifiedChannelBits(prev => {\n      const newMap = new Map(prev);\n      const currentBits = newMap.get(mappingIndex) || new Set<number>();\n      const newBits = new Set<number>(currentBits);\n      \n      if (newBits.has(bitIndex)) {\n        newBits.delete(bitIndex);\n      } else {\n        newBits.add(bitIndex);\n      }\n      \n      newMap.set(mappingIndex, newBits);\n      \n      // Update the mapping with proper metadata structure\n      const updatedMappings = mappings.map((mapping, index) => {\n        if (index === mappingIndex) {\n          const comment = modifiedChannelComments.get(mappingIndex) || '';\n          const baseAddress = mapping.plc_reg_add;\n          \n          // Create bit_mappings object\n          const bit_mappings: any = {};\n          Array.from(newBits).forEach((bit: number) => {\n            const bitKey = `bit_${bit.toString().padStart(2, '0')}`;\n            bit_mappings[bitKey] = {\n              address: `${baseAddress}.${bit.toString().padStart(2, '0')}`,\n              description: comment,\n              bit_position: bit\n            };\n          });\n          \n          return {\n            ...mapping,\n            metadata: {\n              bit_count: newBits.size,\n              bit_mappings\n            }\n          };\n        }\n        return mapping;\n      });\n      \n      onMappingsChange(updatedMappings);\n      return newMap;\n    });\n  };\n\n  // Handler for modified channel comment updates - updates metadata bit_mappings\n  const updateModifiedChannelComment = (mappingIndex: number, comment: string) => {\n    setModifiedChannelComments(prev => {\n      const newMap = new Map(prev);\n      newMap.set(mappingIndex, comment);\n      return newMap;\n    });\n    \n    // Update the description field and metadata\n    const updatedMappings = mappings.map((mapping, index) => {\n      if (index === mappingIndex && isModifiedChannel(mapping)) {\n        const currentBits = modifiedChannelBits.get(mappingIndex) || new Set<number>();\n        const baseAddress = mapping.plc_reg_add;\n        \n        // Create bit_mappings object with updated description\n        const bit_mappings: any = {};\n        Array.from(currentBits).forEach((bit: number) => {\n          const bitKey = `bit_${bit.toString().padStart(2, '0')}`;\n          bit_mappings[bitKey] = {\n            address: `${baseAddress}.${bit.toString().padStart(2, '0')}`,\n            description: comment,\n            bit_position: bit\n          };\n        });\n        \n        return {\n          ...mapping,\n          description: comment,\n          metadata: {\n            bit_count: currentBits.size,\n            bit_mappings\n          }\n        };\n      }\n      return mapping;\n    });\n    \n    onMappingsChange(updatedMappings);\n  };\n\n  const toggleSelectAll = () => {\n    const visibleIndices = visibleMappings.map(({ originalIndex }) => originalIndex);\n    if (selectedRegisters.size === visibleIndices.length && visibleIndices.length > 0) {\n      setSelectedRegisters(new Set());\n    } else {\n      setSelectedRegisters(new Set(visibleIndices));\n    }\n  };\n\n  const toggleBit = (channelIndex: number, bitNumber: number) => {\n    const channelMapping = mappings[channelIndex];\n    if (channelMapping && isBoolChannel(channelMapping)) {\n      const baseAddress = channelMapping.plc_reg_add.split('.')[0];\n      const currentBits = channelBitStates.get(channelIndex) || new Set();\n      \n      // Create new mappings array\n      let newMappings = [...mappings];\n      \n      // Remove old individual BOOL entries for this base address\n      newMappings = newMappings.filter(mapping => \n        !(mapping.data_type === 'BOOL' && mapping.plc_reg_add.startsWith(baseAddress + '.') && !mapping.opcua_reg_add.endsWith('_BC'))\n      );\n      \n      // Toggle the bit and create new bit set\n      const newBits = new Set(currentBits);\n      if (newBits.has(bitNumber)) {\n        newBits.delete(bitNumber);\n      } else {\n        newBits.add(bitNumber);\n      }\n      \n      // Add new BOOL entries for selected bits\n      newBits.forEach((bit: number) => {\n        const bitMapping: AddressMapping = {\n          plc_reg_add: `${baseAddress}.${bit.toString().padStart(2, '0')}`,\n          data_type: 'BOOL',\n          opcua_reg_add: `${baseAddress}_B${bit.toString().padStart(2, '0')}`\n        };\n        newMappings.push(bitMapping);\n      });\n      \n      onMappingsChange(newMappings);\n    }\n  };\n\n  const addMapping = () => {\n    const newMapping: AddressMapping = {\n      plc_reg_add: \"\",\n      data_type: \"WORD\",\n      opcua_reg_add: \"\"\n    };\n    // Add new mapping at the top of the list so user can see it easily\n    onMappingsChange([newMapping, ...mappings]);\n    \n    // Update selectedRegisters to account for the new mapping at index 0\n    // All existing indices shift by 1, and select the new mapping at index 0\n    const updatedSelectedRegisters = new Set<number>();\n    selectedRegisters.forEach(index => updatedSelectedRegisters.add(index + 1));\n    updatedSelectedRegisters.add(0); // Select the new mapping\n    setSelectedRegisters(updatedSelectedRegisters);\n  };\n\n  // Group deselect handlers\n  const handleCsvUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      complete: (results) => {\n        try {\n          const registers: string[] = [];\n          const data = results.data as string[][];\n          \n          data.forEach((row) => {\n            if (row && row.length > 0 && row[0] && row[0].trim()) {\n              const register = row[0].trim();\n              if (register) {\n                registers.push(register);\n              }\n            }\n          });\n          \n          setCsvParsedCount(registers.length);\n          \n          if (registers.length > 0) {\n            toast({\n              title: \"CSV Parsed\",\n              description: `Found ${registers.length} registers for deselection.`,\n            });\n          }\n          \n          // Store parsed registers temporarily for bulk deselect\n          (window as any)._tempDeselectRegisters = registers;\n        } catch (error) {\n          console.error('Error parsing CSV:', error);\n          toast({\n            title: \"Parse Error\",\n            description: \"Failed to parse the CSV file.\",\n            variant: \"destructive\",\n          });\n        }\n      },\n      error: (error) => {\n        console.error('CSV parse error:', error);\n        toast({\n          title: \"Upload Error\", \n          description: \"Failed to read the CSV file.\",\n          variant: \"destructive\",\n        });\n      },\n      header: false,\n      skipEmptyLines: true,\n    });\n  };\n\n  const handleBulkDeselect = () => {\n    const registers = (window as any)._tempDeselectRegisters as string[];\n    if (!registers || registers.length === 0) return;\n\n    const newDeselectedKeys = new Set([...Array.from(deselectedKeys), ...registers]);\n    onDeselectedKeysChange?.(newDeselectedKeys);\n    \n    // Update selectedRegisters to reflect deselection\n    updateSelectedRegistersFromDeselected(newDeselectedKeys);\n    \n    toast({\n      title: \"Bulk Deselected\",\n      description: `Deselected ${registers.length} registers.`,\n    });\n    \n    setCsvParsedCount(0);\n    (window as any)._tempDeselectRegisters = [];\n  };\n\n  const handleManualDeselect = () => {\n    const register = manualDeselectInput.trim();\n    if (!register) return;\n\n    const newDeselectedKeys = new Set([...Array.from(deselectedKeys), register]);\n    onDeselectedKeysChange?.(newDeselectedKeys);\n    \n    // Update selectedRegisters to reflect deselection\n    updateSelectedRegistersFromDeselected(newDeselectedKeys);\n    \n    toast({\n      title: \"Register Deselected\",\n      description: `Deselected register: ${register}`,\n    });\n    \n    setManualDeselectInput(\"\");\n  };\n\n  const handleClearDeselected = () => {\n    const newDeselectedKeys = new Set<string>();\n    onDeselectedKeysChange?.(newDeselectedKeys);\n    updateSelectedRegistersFromDeselected(newDeselectedKeys);\n    \n    toast({\n      title: \"Deselection Cleared\",\n      description: \"All registers are now selected again.\",\n    });\n  };\n\n  // Helper to update selectedRegisters based on deselectedKeys\n  const updateSelectedRegistersFromDeselected = (deselectedSet: Set<string>) => {\n    const newSelectedRegisters = new Set<number>();\n    \n    mappings.forEach((mapping, index) => {\n      const baseRegister = mapping.plc_reg_add.split('.')[0];\n      const fullRegister = mapping.plc_reg_add;\n      \n      // Check if this mapping should be deselected\n      const isDeselected = deselectedSet.has(baseRegister) || deselectedSet.has(fullRegister);\n      \n      if (!isDeselected) {\n        newSelectedRegisters.add(index);\n      }\n    });\n    \n    setSelectedRegisters(newSelectedRegisters);\n  };\n\n  const updateMapping = (index: number, field: keyof AddressMapping, value: string) => {\n    const updatedMappings = mappings.map((mapping, i) => {\n      if (i === index) {\n        const updatedMapping = { ...mapping, [field]: value };\n        \n        // Auto-generate OPC UA register when PLC address or data type changes\n        if (field === 'plc_reg_add' || field === 'data_type') {\n          const plcAddress = field === 'plc_reg_add' ? value : mapping.plc_reg_add;\n          const dataType = field === 'data_type' ? value : mapping.data_type;\n          \n          if (plcAddress && dataType) {\n            const plcNumber = typeof plcNo === 'number' ? plcNo : parseInt(plcNo?.toString() || '1') || 1;\n            const baseAddr = plcAddress.split('.')[0];\n            let newOpcuaName: string;\n            \n            if (dataType === 'CHANNEL') {\n              newOpcuaName = generateOpcuaName(baseAddr, 'CHANNEL', undefined, false, plcNumber);\n            } else if (dataType === 'modified channel') {\n              newOpcuaName = generateOpcuaName(baseAddr, 'MODIFIED CHANNEL', undefined, false, plcNumber);\n            } else if (dataType === 'BOOL' && plcAddress.includes('.')) {\n              const bitPosition = plcAddress.split('.')[1];\n              newOpcuaName = generateOpcuaName(baseAddr, 'BOOL', bitPosition, false, plcNumber);\n            } else {\n              newOpcuaName = generateOpcuaName(baseAddr, dataType, undefined, false, plcNumber);\n            }\n            \n            updatedMapping.opcua_reg_add = newOpcuaName;\n          }\n        }\n        \n        return updatedMapping;\n      }\n      return mapping;\n    });\n    onMappingsChange(updatedMappings);\n  };\n\n  const removeMapping = (index: number) => {\n    const updatedMappings = mappings.filter((_, i) => i !== index);\n    onMappingsChange(updatedMappings);\n    \n    // Update selectedRegisters to account for the removed mapping\n    const updatedSelectedRegisters = new Set<number>();\n    selectedRegisters.forEach(selectedIndex => {\n      if (selectedIndex < index) {\n        // Indices before the removed one stay the same\n        updatedSelectedRegisters.add(selectedIndex);\n      } else if (selectedIndex > index) {\n        // Indices after the removed one shift down by 1\n        updatedSelectedRegisters.add(selectedIndex - 1);\n      }\n      // selectedIndex === index is not added (it's removed)\n    });\n    setSelectedRegisters(updatedSelectedRegisters);\n  };\n\n  return (\n    <div data-testid=\"container-mappings-table\">\n      <div className=\"mb-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            onClick={addMapping} \n            className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n            data-testid=\"button-add-mapping\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            {t('addMappingText')}\n          </Button>\n          \n          {/* Group Deselect Section */}\n          <Collapsible open={groupDeselectExpanded} onOpenChange={setGroupDeselectExpanded}>\n            <CollapsibleTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-group-deselect-toggle\"\n              >\n                <ChevronDown \n                  className={`w-4 h-4 transition-transform ${\n                    groupDeselectExpanded ? 'rotate-180' : ''\n                  }`} \n                />\n                <span>Group Deselect</span>\n              </Button>\n            </CollapsibleTrigger>\n            <CollapsibleContent className=\"absolute z-10 bg-background border rounded-lg shadow-lg p-4 mt-2 min-w-80\">\n              <div className=\"space-y-4\">\n                {/* CSV Upload Section */}\n                <div>\n                  <h4 className=\"text-sm font-medium mb-2\">CSV Upload for Bulk Deselect</h4>\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"file\"\n                      accept=\".csv,.txt\"\n                      onChange={handleCsvUpload}\n                      className=\"block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-muted file:text-muted-foreground hover:file:bg-muted/80\"\n                      data-testid=\"input-csv-upload\"\n                    />\n                    {csvParsedCount > 0 && (\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Parsed {csvParsedCount} registers\n                        </span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\" \n                          onClick={handleBulkDeselect}\n                          data-testid=\"button-bulk-deselect\"\n                        >\n                          Deselect\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Manual Deselect Section */}\n                <div>\n                  <h4 className=\"text-sm font-medium mb-2\">Manual Register Deselect</h4>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Enter register address (e.g., C0001, 2.01)...\"\n                      value={manualDeselectInput}\n                      onChange={(e) => setManualDeselectInput(e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"input-manual-deselect\"\n                    />\n                    <Button \n                      size=\"sm\" \n                      onClick={handleManualDeselect}\n                      disabled={!manualDeselectInput.trim()}\n                      data-testid=\"button-manual-deselect\"\n                    >\n                      Add\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Current Deselected Count */}\n                {deselectedKeys.size > 0 && (\n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {deselectedKeys.size} registers deselected\n                    </span>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      onClick={handleClearDeselected}\n                      data-testid=\"button-clear-deselected\"\n                    >\n                      <X className=\"w-3 h-3 mr-1\" />\n                      Clear\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CollapsibleContent>\n          </Collapsible>\n        </div>\n      </div>\n      \n      {/* Dynamic variable count display */}\n      <div className=\"mb-4 px-2\">\n        <span className=\"text-sm font-medium text-muted-foreground\" data-testid=\"text-total-selected\">\n          total selected variable = {selectedRegisters.size + getTotalModifiedChannelBits()}\n        </span>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full border border-border rounded-lg\" data-testid=\"table-mappings\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-sm font-medium text-foreground\" data-testid=\"header-select\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    checked={selectedRegisters.size === visibleMappings.length && visibleMappings.length > 0}\n                    onCheckedChange={toggleSelectAll}\n                    data-testid=\"checkbox-select-all\"\n                  />\n                  <span>Select</span>\n                </div>\n              </th>\n              <th className=\"px-4 py-3 text-left text-sm font-medium text-foreground\" data-testid=\"header-plc-reg\">\n                {t('plcRegHeader')}\n              </th>\n              <th className=\"px-4 py-3 text-left text-sm font-medium text-foreground\" data-testid=\"header-data-type\">\n                {t('dataTypeHeader')}\n              </th>\n              <th className=\"px-4 py-3 text-left text-sm font-medium text-foreground\" data-testid=\"header-opcua-reg\">\n                {t('opcuaRegHeader')}\n              </th>\n              <th className=\"px-4 py-3 text-left text-sm font-medium text-foreground\" data-testid=\"header-actions\">\n                {t('actionsHeader')}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {visibleMappings.map(({ mapping, originalIndex }) => {\n              const isBoolChannelEntry = isBoolChannel(mapping);\n              const isModifiedChannelEntry = isModifiedChannel(mapping);\n              const isExpanded = expandedBoolChannels.has(originalIndex);\n              const selectedBits = channelBitStates.get(originalIndex) || new Set();\n              const modifiedBits = modifiedChannelBits.get(originalIndex) || new Set();\n              const modifiedComment = modifiedChannelComments.get(originalIndex) || '';\n              const baseAddress = mapping.plc_reg_add.split('.')[0];\n              const existingBitData = isModifiedChannelEntry ? getExistingBitsForAddress(baseAddress, originalIndex) : { boolBits: [], modifiedBits: [] };\n              \n              return (\n                <Fragment key={originalIndex}>\n                  <tr \n                    className={`table-row border-t border-border fade-in ${\n                      isBoolChannelEntry ? 'bg-orange-50 dark:bg-orange-900/20' : isModifiedChannelEntry ? 'bg-blue-50 dark:bg-blue-900/20' : ''\n                    }`} \n                    data-testid={`row-mapping-${originalIndex}`}\n                  >\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          checked={selectedRegisters.has(originalIndex)}\n                          onCheckedChange={() => toggleRegisterSelection(originalIndex)}\n                          data-testid={`checkbox-select-${originalIndex}`}\n                        />\n                        {(isBoolChannelEntry || isModifiedChannelEntry) && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleBoolChannelExpansion(originalIndex)}\n                            className=\"p-1 h-6 w-6\"\n                            data-testid={`button-expand-${originalIndex}`}\n                          >\n                            {isExpanded ? (\n                              <ChevronDown className=\"w-3 h-3\" />\n                            ) : (\n                              <ChevronRight className=\"w-3 h-3\" />\n                            )}\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Input\n                        value={mapping.plc_reg_add}\n                        onChange={(e) => updateMapping(originalIndex, 'plc_reg_add', e.target.value)}\n                        placeholder={t('enterRegisterAddress')}\n                        className=\"text-sm\"\n                        data-testid={`input-plc-reg-${originalIndex}`}\n                      />\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Select \n                        value={mapping.data_type} \n                        onValueChange={(value: AddressMapping['data_type']) => \n                          updateMapping(originalIndex, 'data_type', value)\n                        }\n                      >\n                        <SelectTrigger className=\"text-sm\" data-testid={`select-data-type-${originalIndex}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"CHANNEL\">CHANNEL</SelectItem>\n                          <SelectItem value=\"modified channel\">MODIFIED CHANNEL</SelectItem>\n                          <SelectItem value=\"BOOL\">BOOL</SelectItem>\n                          <SelectItem value=\"WORD\">WORD</SelectItem>\n                          <SelectItem value=\"UDINT\">UDINT</SelectItem>\n                          <SelectItem value=\"DWORD\">DWORD</SelectItem>\n                          <SelectItem value=\"INT\">INT</SelectItem>\n                          <SelectItem value=\"REAL\">REAL</SelectItem>\n                          <SelectItem value=\"LREAL\">LREAL</SelectItem>\n                          <SelectItem value=\"int16\">int16</SelectItem>\n                          <SelectItem value=\"int32\">int32</SelectItem>\n                          <SelectItem value=\"float32\">float32</SelectItem>\n                          <SelectItem value=\"bool\">bool</SelectItem>\n                          <SelectItem value=\"string\">string</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Input\n                        value={mapping.opcua_reg_add}\n                        onChange={(e) => updateMapping(originalIndex, 'opcua_reg_add', e.target.value)}\n                        placeholder={t('enterOpcuaRegister')}\n                        className=\"text-sm\"\n                        data-testid={`input-opcua-reg-${originalIndex}`}\n                      />\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMapping(originalIndex)}\n                        className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        data-testid={`button-delete-mapping-${originalIndex}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                  {/* Expandable Boolean Channel Grid */}\n                  {isBoolChannelEntry && isExpanded && (\n                    <tr data-testid={`row-expanded-${originalIndex}`}>\n                      <td colSpan={5} className=\"px-4 py-0 bg-orange-50 dark:bg-orange-900/20\">\n                        <BooleanChannelGrid\n                          plcAddress={mapping.plc_reg_add}\n                          selectedBits={Array.from(selectedBits)}\n                          onBitToggle={(bit) => toggleBit(originalIndex, bit)}\n                        />\n                      </td>\n                    </tr>\n                  )}\n                  {/* Expandable Modified Channel Interface */}\n                  {isModifiedChannelEntry && isExpanded && (\n                    <tr data-testid={`row-expanded-modified-${originalIndex}`}>\n                      <td colSpan={5} className=\"px-4 py-0 bg-blue-50 dark:bg-blue-900/20\">\n                        <div className=\"mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded border-l-4 border-blue-500\">\n                          <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-2\">\n                            Modified Channel Configuration - Base: {mapping.plc_reg_add.split('.')[0]}\n                          </h4>\n                          <div className=\"space-y-4\">\n                            {/* Bit Selection Grid */}\n                            <div className=\"space-y-1\">\n                              <div className=\"text-xs text-blue-700 dark:text-blue-300 mb-2\">\n                                Select Required Bits:\n                                {(existingBitData.boolBits.length > 0 || existingBitData.modifiedBits.length > 0) && (\n                                  <span className=\"ml-2 text-orange-600 dark:text-orange-400\">\n                                    (Orange = in boolean channel, Yellow = in other modified channels)\n                                  </span>\n                                )}\n                              </div>\n                              {/* Top row: bits 15-8 */}\n                              <div className=\"flex space-x-1\">\n                                <span className=\"text-xs font-mono text-muted-foreground w-8\">15</span>\n                                {Array.from({ length: 8 }, (_, i) => {\n                                  const bitIndex = 15 - i;\n                                  const isSelected = modifiedBits.has(bitIndex);\n                                  const isBoolExisting = existingBitData.boolBits.includes(bitIndex);\n                                  const isModifiedExisting = existingBitData.modifiedBits.includes(bitIndex);\n                                  return (\n                                    <button\n                                      key={bitIndex}\n                                      onClick={() => toggleModifiedChannelBit(originalIndex, bitIndex)}\n                                      className={`w-6 h-6 text-xs font-mono border rounded ${\n                                        isSelected \n                                          ? 'bg-blue-500 text-white border-blue-600' \n                                          : isBoolExisting\n                                          ? 'bg-orange-200 dark:bg-orange-800 text-orange-800 dark:text-orange-200 border-orange-400 dark:border-orange-600 hover:bg-orange-300 dark:hover:bg-orange-700'\n                                          : isModifiedExisting\n                                          ? 'bg-yellow-200 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200 border-yellow-400 dark:border-yellow-600 hover:bg-yellow-300 dark:hover:bg-yellow-700'\n                                          : 'bg-gray-100 dark:bg-gray-700 text-gray-500 border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'\n                                      }`}\n                                      data-testid={`modified-bit-${mapping.plc_reg_add}-${bitIndex}`}\n                                      title={isBoolExisting ? 'Bit already in use by boolean channel' : isModifiedExisting ? 'Bit selected in another modified channel' : ''}\n                                    >\n                                      {bitIndex}\n                                    </button>\n                                  );\n                                })}\n                                <span className=\"text-xs font-mono text-muted-foreground w-8\">8</span>\n                              </div>\n                              {/* Bottom row: bits 7-0 */}\n                              <div className=\"flex space-x-1\">\n                                <span className=\"text-xs font-mono text-muted-foreground w-8\">7</span>\n                                {Array.from({ length: 8 }, (_, i) => {\n                                  const bitIndex = 7 - i;\n                                  const isSelected = modifiedBits.has(bitIndex);\n                                  const isBoolExisting = existingBitData.boolBits.includes(bitIndex);\n                                  const isModifiedExisting = existingBitData.modifiedBits.includes(bitIndex);\n                                  return (\n                                    <button\n                                      key={bitIndex}\n                                      onClick={() => toggleModifiedChannelBit(originalIndex, bitIndex)}\n                                      className={`w-6 h-6 text-xs font-mono border rounded ${\n                                        isSelected \n                                          ? 'bg-blue-500 text-white border-blue-600' \n                                          : isBoolExisting\n                                          ? 'bg-orange-200 dark:bg-orange-800 text-orange-800 dark:text-orange-200 border-orange-400 dark:border-orange-600 hover:bg-orange-300 dark:hover:bg-orange-700'\n                                          : isModifiedExisting\n                                          ? 'bg-yellow-200 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200 border-yellow-400 dark:border-yellow-600 hover:bg-yellow-300 dark:hover:bg-yellow-700'\n                                          : 'bg-gray-100 dark:bg-gray-700 text-gray-500 border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'\n                                      }`}\n                                      data-testid={`modified-bit-${mapping.plc_reg_add}-${bitIndex}`}\n                                      title={isBoolExisting ? 'Bit already in use by boolean channel' : isModifiedExisting ? 'Bit selected in another modified channel' : ''}\n                                    >\n                                      {bitIndex}\n                                    </button>\n                                  );\n                                })}\n                                <span className=\"text-xs font-mono text-muted-foreground w-8\">0</span>\n                              </div>\n                            </div>\n                            {/* Comment Box */}\n                            <div className=\"space-y-2\">\n                              <label className=\"text-xs text-blue-700 dark:text-blue-300\">Description/Comment:</label>\n                              <textarea\n                                value={modifiedComment}\n                                onChange={(e) => updateModifiedChannelComment(originalIndex, e.target.value)}\n                                placeholder=\"Enter description for this modified channel...\"\n                                className=\"w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-200\"\n                                rows={3}\n                                data-testid={`modified-comment-${originalIndex}`}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </Fragment>\n              );\n            })}\n            {visibleMappings.length === 0 && (\n              <tr>\n                <td colSpan={5} className=\"px-4 py-8 text-center text-muted-foreground\" data-testid=\"text-no-mappings\">\n                  No address mappings configured. Click \"Add New Mapping\" to get started.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":48937},"client/src/components/file-upload-card.tsx":{"content":"import { useState } from \"react\";\nimport { Upload, CloudUpload, Eye, EyeOff } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Papa from \"papaparse\";\nimport type { AddressMapping } from \"@shared/schema\";\nimport { parseCSVData, type ParseResult } from \"@/lib/plc-parser\";\n// @ts-ignore - encoding-japanese doesn't have TypeScript definitions\nimport Encoding from \"encoding-japanese\";\n\ninterface FileUploadCardProps {\n  onFileProcessed: (mappings: AddressMapping[], result?: ParseResult) => void;\n  onClose?: () => void;\n  plcNo?: number;\n}\n\nexport function FileUploadCard({ onFileProcessed, onClose, plcNo = 1 }: FileUploadCardProps) {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [parseResult, setParseResult] = useState<ParseResult | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [uploadedFileName, setUploadedFileName] = useState<string>(\"\");\n  const [rawCSVData, setRawCSVData] = useState<string[][]>([]);\n\n  const processFile = (file: File) => {\n    if (!file.name.match(/\\.(csv|txt)$/i)) {\n      toast({\n        title: t('fileUploadError'),\n        description: 'Please upload a CSV or TXT file',\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setProgress(0);\n    setParseResult(null);\n    setShowPreview(false);\n    setUploadedFileName(file.name);\n\n    // Simulate progress\n    const progressInterval = setInterval(() => {\n      setProgress(prev => {\n        if (prev >= 90) return prev;\n        return prev + 10;\n      });\n    }, 100);\n\n    // Read file as ArrayBuffer for proper encoding handling\n    const reader = new FileReader();\n    reader.onload = function(event) {\n      try {\n        const arrayBuffer = event.target?.result as ArrayBuffer;\n        const uint8Array = new Uint8Array(arrayBuffer);\n        \n        // Try to detect encoding - similar to Python's encoding detection\n        let decodedString = '';\n        const encodingsToTry = ['SJIS', 'UTF8', 'EUCJP', 'JIS'];\n        \n        for (const encoding of encodingsToTry) {\n          try {\n            const unicodeArray = Encoding.convert(uint8Array, {\n              to: 'UNICODE',\n              from: encoding\n            });\n            \n            decodedString = Encoding.codeToString(unicodeArray);\n            \n            // Check if the decoded string contains readable content\n            // If it has proper CSV structure, we found the right encoding\n            if (decodedString && !decodedString.includes('\\ufffd') && decodedString.includes(',')) {\n              console.log(`Successfully decoded with encoding: ${encoding}`);\n              break;\n            }\n          } catch (e: unknown) {\n            // Continue to next encoding\n            continue;\n          }\n        }\n        \n        // If no encoding worked, fall back to UTF-8\n        if (!decodedString || decodedString.includes('\\ufffd')) {\n          const decoder = new TextDecoder('utf-8');\n          decodedString = decoder.decode(uint8Array);\n        }\n\n        // Parse the decoded string with PapaParse\n        Papa.parse(decodedString, {\n          header: false,\n          skipEmptyLines: true,\n          complete: (results) => {\n            clearInterval(progressInterval);\n            setProgress(100);\n\n            try {\n              const data = results.data as string[][];\n              \n              // Store the raw CSV data\n              setRawCSVData(data);\n              \n              // Skip header row if present\n              const startIndex = data[0]?.some(cell => \n                cell?.toLowerCase().includes('register') || \n                cell?.toLowerCase().includes('type') ||\n                cell?.toLowerCase().includes('address')\n              ) ? 1 : 0;\n\n              // Use the new PLC parser with the specified PLC number\n              const result = parseCSVData(data.slice(startIndex), plcNo);\n              setParseResult(result);\n              setShowPreview(true);\n\n              setTimeout(() => {\n                setIsUploading(false);\n                toast({\n                  title: t('fileUploadSuccess'),\n                  description: `${result.stats.validRecords} mappings processed, ${result.stats.booleanChannels} boolean channels created`,\n                });\n              }, 500);\n\n            } catch (error) {\n              setProgress(0);\n              setIsUploading(false);\n              setParseResult(null);\n              toast({\n                title: t('fileUploadError'),\n                description: error instanceof Error ? error.message : 'Unknown error occurred',\n                variant: \"destructive\",\n              });\n            }\n          },\n          error: (error: { message: string }) => {\n            clearInterval(progressInterval);\n            setProgress(0);\n            setIsUploading(false);\n            toast({\n              title: t('fileUploadError'),\n              description: error.message,\n              variant: \"destructive\",\n            });\n          }\n        });\n\n      } catch (error) {\n        clearInterval(progressInterval);\n        setProgress(0);\n        setIsUploading(false);\n        toast({\n          title: t('fileUploadError'),\n          description: error instanceof Error ? error.message : 'File encoding detection failed',\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    reader.onerror = function() {\n      clearInterval(progressInterval);\n      setProgress(0);\n      setIsUploading(false);\n      toast({\n        title: t('fileUploadError'),\n        description: 'Failed to read file',\n        variant: \"destructive\",\n      });\n    };\n\n    // Read the file as ArrayBuffer instead of text\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      processFile(file);\n    }\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0];\n    if (file) {\n      processFile(file);\n    }\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n  };\n\n  const handleImport = () => {\n    if (parseResult) {\n      onFileProcessed(parseResult.addressMappings, parseResult);\n      // Keep parseResult to maintain the statistics display\n      toast({\n        title: \"Import Successful\", \n        description: `${parseResult.stats.validRecords} address mappings have been imported`,\n      });\n    }\n  };\n\n  const handleUploadAnother = () => {\n    setParseResult(null);\n    setShowPreview(false);\n    setProgress(0);\n    setUploadedFileName(\"\");\n    setRawCSVData([]);\n  };\n\n  return (\n    <Card className=\"mb-6 slide-up\" data-testid=\"card-file-upload\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Upload className=\"w-5 h-5 text-primary\" />\n          <span data-testid=\"text-upload-title\">{t('uploadTitle')}</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4\">\n          <p className=\"text-muted-foreground mb-2\" data-testid=\"text-upload-description\">\n            {t('uploadDescription')}\n          </p>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm\">\n            <div className=\"bg-muted p-2 rounded text-center\">\n              <span className=\"font-medium\" data-testid=\"text-col1\">{t('col1')}</span>\n            </div>\n            <div className=\"bg-muted p-2 rounded text-center\">\n              <span className=\"font-medium\" data-testid=\"text-col2\">{t('col2')}</span>\n            </div>\n            <div className=\"bg-muted p-2 rounded text-center\">\n              <span className=\"font-medium\" data-testid=\"text-col3\">{t('col3')}</span>\n            </div>\n            <div className=\"bg-muted p-2 rounded text-center\">\n              <span className=\"font-medium\" data-testid=\"text-col4\">{t('col4')}</span>\n            </div>\n          </div>\n        </div>\n        \n        {!parseResult && (\n          <div \n            className=\"upload-zone rounded-lg p-8 text-center cursor-pointer\"\n            onClick={() => document.getElementById('fileInput')?.click()}\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n            data-testid=\"zone-file-upload\"\n          >\n            <CloudUpload className=\"w-16 h-16 text-muted-foreground mb-4 mx-auto\" />\n            <p className=\"text-lg font-medium text-foreground mb-2\" data-testid=\"text-upload-main\">\n              {t('uploadText')}\n            </p>\n            <p className=\"text-muted-foreground\" data-testid=\"text-upload-sub\">\n              {t('uploadSubtext')}\n            </p>\n            <input \n              type=\"file\" \n              id=\"fileInput\" \n              className=\"hidden\" \n              accept=\".csv,.txt\"\n              onChange={handleFileSelect}\n              data-testid=\"input-file\"\n            />\n          </div>\n        )}\n        \n        {isUploading && (\n          <div className=\"mt-4\" data-testid=\"container-progress\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-progress\">\n                {t('progressText')}\n              </span>\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-progress-percent\">\n                {progress}%\n              </span>\n            </div>\n            <Progress value={progress} className=\"w-full\" data-testid=\"progress-upload\" />\n          </div>\n        )}\n\n        {parseResult && (\n          <div className=\"space-y-4\" data-testid=\"container-preview\">\n            {/* Filename Display */}\n            <div className=\"bg-primary/10 p-3 rounded-lg border\">\n              <p className=\"text-sm font-medium\" data-testid=\"text-uploaded-filename\">\n                {t('uploadedFile')}: <span className=\"font-mono\">{uploadedFileName}</span>\n              </p>\n            </div>\n            \n            {/* Statistics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total\">{parseResult.stats.totalRecords}</div>\n                <div className=\"text-sm text-muted-foreground\">{t('totalRecords')}</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-valid\">{parseResult.stats.validRecords}</div>\n                <div className=\"text-sm text-muted-foreground leading-tight\">\n                  {language === 'en' ? (\n                    <>\n                      <div>After Modification</div>\n                      <div>Records</div>\n                    </>\n                  ) : (\n                    <>\n                      <div>変更後</div>\n                      <div>レコード数</div>\n                    </>\n                  )}\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-skipped\">{parseResult.stats.skippedRecords}</div>\n                <div className=\"text-sm text-muted-foreground\">{t('skippedRecords')}</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-channels\">{parseResult.stats.booleanChannels}</div>\n                <div className=\"text-sm text-muted-foreground\">{t('booleanChannels')}</div>\n              </div>\n            </div>\n\n            {/* Preview Toggle */}\n            <div className=\"flex justify-center\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowPreview(!showPreview)}\n                data-testid=\"button-toggle-preview\"\n              >\n                {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n                {showPreview ? t('hidePreview') : t('showPreview')}\n              </Button>\n            </div>\n\n            {/* Preview Content */}\n            {showPreview && (\n              <div className=\"border rounded-lg p-4 max-h-96 overflow-auto bg-muted/25\" data-testid=\"container-preview-data\">\n                <h4 className=\"font-semibold mb-3\">{t('previewTitle')}</h4>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"bg-muted\">\n                        <th className=\"p-2 border border-border text-left font-semibold\" data-testid=\"header-col-0\">\n                          {t('colNaming')}\n                        </th>\n                        <th className=\"p-2 border border-border text-left font-semibold\" data-testid=\"header-col-1\">\n                          {t('colDataType')}\n                        </th>\n                        <th className=\"p-2 border border-border text-left font-semibold\" data-testid=\"header-col-2\">\n                          {t('colRegisterAddress')}\n                        </th>\n                        <th className=\"p-2 border border-border text-left font-semibold\" data-testid=\"header-col-3\">\n                          {t('colComments')}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {rawCSVData.map((row, rowIndex) => (\n                        <tr key={rowIndex} data-testid={`preview-row-${rowIndex}`}>\n                          {row.map((cell, cellIndex) => (\n                            <td key={cellIndex} className=\"p-2 border border-border font-mono text-xs\" data-testid={`cell-${rowIndex}-${cellIndex}`}>\n                              {cell}\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-center gap-2\">\n              <Button variant=\"outline\" onClick={handleUploadAnother} data-testid=\"button-upload-another\">\n                Upload Another File\n              </Button>\n              <Button onClick={handleImport} data-testid=\"button-import-mappings\">\n                Import {parseResult.stats.validRecords} Mappings\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":15049},"client/src/components/json-preview-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useLanguage } from \"@/hooks/use-language\";\n\ninterface JsonPreviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  jsonContent: string;\n}\n\nexport function JsonPreviewModal({ isOpen, onClose, jsonContent }: JsonPreviewModalProps) {\n  const { t } = useLanguage();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-96 flex flex-col\" data-testid=\"modal-json-preview\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-json-modal-title\">{t('jsonModalTitle')}</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex-1 overflow-auto\">\n          <pre \n            className=\"bg-muted p-4 rounded text-sm overflow-auto font-mono\"\n            data-testid=\"text-json-content\"\n          >\n            {jsonContent}\n          </pre>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":971},"client/src/components/plc-config-builder.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, Globe, ChevronDown, BarChart, Table, Eye, Download, List, Save } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"./sidebar\";\nimport { FileUploadCard } from \"./file-upload-card\";\nimport { AddressMappingsTable } from \"./address-mappings-table\";\nimport { JsonPreviewModal } from \"./json-preview-modal\";\nimport type { AddressMapping, ConfigFile, PlcConfiguration } from \"@shared/schema\";\nimport type { ParseResult } from \"@/lib/plc-parser\";\nimport { generateOpcuaName } from \"@/lib/plc-parser\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport function PlcConfigBuilder() {\n  const { language, setLanguage, t } = useLanguage();\n  const { toast } = useToast();\n  \n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showUploadCard, setShowUploadCard] = useState(true);\n  const [overviewExpanded, setOverviewExpanded] = useState(false);\n  const [detailsExpanded, setDetailsExpanded] = useState(false);\n  const [showJsonModal, setShowJsonModal] = useState(false);\n  const [showOpcuaListModal, setShowOpcuaListModal] = useState(false);\n  \n  // Configuration state\n  const [configFileName, setConfigFileName] = useState(\"plc_config\");\n  const [configDescription, setConfigDescription] = useState(\"\");\n  const [plcNo, setPlcNo] = useState<number | string>(1);\n  const [plcName, setPlcName] = useState(\"PLC1\");\n  const [plcIp, setPlcIp] = useState(\"192.168.2.2\");\n  const [opcuaUrl, setOpcuaUrl] = useState(\"opc.tcp://192.168.1.20:4840\");\n  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n  const [deselectedKeys, setDeselectedKeys] = useState<Set<string>>(new Set());\n  const [registerSearchTerm, setRegisterSearchTerm] = useState(\"\");\n  const [addressMappings, setAddressMappings] = useState<AddressMapping[]>([\n    { plc_reg_add: \"2.01\", data_type: \"BOOL\", opcua_reg_add: \"BOOL_VAR01\" },\n    { plc_reg_add: \"C0001\", data_type: \"WORD\", opcua_reg_add: \"INT_VAR01\" }\n  ]);\n  \n  // Memory area selections state\n  const [selectedMemoryAreas, setSelectedMemoryAreas] = useState<Set<string>>(\n    new Set(['I/O', 'A', 'C', 'D', 'E', 'T', 'H'])\n  );\n  const [selectedRegisters, setSelectedRegisters] = useState<Set<number>>(new Set());\n  \n  // File parsing results state\n  const [parseResult, setParseResult] = useState<ParseResult | null>(null);\n\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    const now = new Date();\n    const options: Intl.DateTimeFormatOptions = { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    };\n    setCurrentDate(now.toLocaleDateString('en-US', options));\n  }, []);\n\n  // Regenerate OPC UA names when PLC number changes\n  useEffect(() => {\n    const plcNumber = typeof plcNo === 'number' ? plcNo : parseInt(plcNo.toString()) || 1;\n    const updatedMappings = addressMappings.map(mapping => {\n      const baseAddr = mapping.plc_reg_add.split('.')[0];\n      let newOpcuaName: string;\n      \n      // Handle different mapping types correctly\n      if (mapping.opcua_reg_add.endsWith('_BC')) {\n        // This is a grouped boolean channel - use BOOL with isBooleanChannel=true\n        newOpcuaName = generateOpcuaName(baseAddr, 'BOOL', undefined, true, plcNumber);\n      } else if (mapping.data_type === 'CHANNEL' || mapping.data_type === 'modified channel') {\n        // This is a true CHANNEL mapping or modified channel - use CHANNEL\n        newOpcuaName = generateOpcuaName(baseAddr, 'CHANNEL', undefined, false, plcNumber);\n      } else if (mapping.data_type === 'BOOL' && mapping.plc_reg_add.includes('.')) {\n        // Individual BOOL with bit position\n        const bitPosition = mapping.plc_reg_add.split('.')[1];\n        newOpcuaName = generateOpcuaName(baseAddr, 'BOOL', bitPosition, false, plcNumber);\n      } else {\n        // Other data types\n        newOpcuaName = generateOpcuaName(baseAddr, mapping.data_type, undefined, false, plcNumber);\n      }\n      \n      return {\n        ...mapping,\n        opcua_reg_add: newOpcuaName\n      };\n    });\n    \n    setAddressMappings(updatedMappings);\n  }, [plcNo]); // Only depend on plcNo to avoid infinite loops\n\n  // Helper function to get memory area from mapping  \n  const getMemoryAreaFromMapping = (mapping: AddressMapping): string => {\n    const firstChar = mapping.plc_reg_add.charAt(0).toUpperCase();\n    // Group I and O into I/O, and numeric addresses as I/O\n    if (firstChar === 'I' || firstChar === 'O' || /^\\d/.test(mapping.plc_reg_add)) {\n      return 'I/O';\n    }\n    return firstChar;\n  };\n\n  // Helper function to remove duplicate entries based on OPC UA register name\n  const dedupeByOpcuaName = (mappings: any[], plcName: string): any[] => {\n    const seen = new Set<string>();\n    const deduplicated: any[] = [];\n    \n    for (const mapping of mappings) {\n      const key = `${plcName}|${mapping.opcua_reg_add}`;\n      if (!seen.has(key)) {\n        seen.add(key);\n        deduplicated.push(mapping);\n      }\n    }\n    \n    return deduplicated;\n  };\n\n  // Helper function to generate OPCUA list in the specified format\n  const generateOpcuaList = (): string => {\n    // Filter and get mappings based on selections (similar to JSON generation)\n    const filteredMappings = addressMappings\n      .map((mapping, index) => ({ mapping, index }))\n      .filter(({ mapping, index }) => {\n        // Filter by memory area selection\n        const memoryArea = getMemoryAreaFromMapping(mapping);\n        if (!selectedMemoryAreas.has(memoryArea)) {\n          return false;\n        }\n        \n        // Filter by individual register selection (if no registers selected, select all)\n        if (selectedRegisters.size > 0 && !selectedRegisters.has(index)) {\n          return false;\n        }\n        \n        return true;\n      })\n      .map(({ mapping }) => mapping);\n\n    // Remove duplicates based on OPC UA register name\n    const deduplicatedMappings = dedupeByOpcuaName(filteredMappings, plcName);\n\n    // Generate the OPCUA list format\n    const opcuaLines = deduplicatedMappings.map(mapping => {\n      const opcuaName = mapping.opcua_reg_add;\n      const dataType = mapping.data_type.toUpperCase();\n      \n      // If data type is BOOL, use BOOL; otherwise use STRING\n      const opcuaType = dataType === 'BOOL' ? 'BOOL' : 'STRING';\n      \n      return `${opcuaName}:${opcuaType};`;\n    });\n\n    return opcuaLines.join('\\n');\n  };\n\n  const generateJson = (): string => {\n    // Filter and transform address mappings based on selections\n    const filteredMappings = addressMappings\n      .map((mapping, index) => ({ mapping, index }))\n      .filter(({ mapping, index }) => {\n        // Filter by memory area selection\n        const memoryArea = getMemoryAreaFromMapping(mapping);\n        if (!selectedMemoryAreas.has(memoryArea)) {\n          return false;\n        }\n        \n        // Filter by individual register selection (if no registers selected, select all)\n        if (selectedRegisters.size > 0 && !selectedRegisters.has(index)) {\n          return false;\n        }\n        \n        return true;\n      })\n      .map(({ mapping }) => {\n        const memoryArea = getMemoryAreaFromMapping(mapping);\n        const result: any = {\n          plc_reg_add: mapping.plc_reg_add,\n          data_type: mapping.data_type === \"modified channel\" ? \"channel\" : mapping.data_type.toLowerCase(),\n          opcua_reg_add: mapping.opcua_reg_add,\n          description: (mapping as any).description || '',\n          Memory_Area: memoryArea\n        };\n        \n        // Include metadata if it exists (for boolean channels)\n        if ((mapping as any).metadata) {\n          result.metadata = (mapping as any).metadata;\n        }\n        \n        return result;\n      });\n\n    // Remove duplicates based on OPC UA register name (keep first occurrence)\n    const deduplicatedMappings = dedupeByOpcuaName(filteredMappings, plcName);\n\n    const config: ConfigFile = {\n      plcs: [{\n        plc_name: plcName,\n        plc_ip: plcIp,\n        opcua_url: opcuaUrl,\n        address_mappings: deduplicatedMappings as any\n      }]\n    };\n    return JSON.stringify(config, null, 2);\n  };\n\n  const handleFileProcessed = (mappings: AddressMapping[], result?: ParseResult) => {\n    setAddressMappings(mappings);\n    if (result) {\n      setParseResult(result);\n    }\n    // Keep the upload card visible after importing\n  };\n\n  const handleExportJson = () => {\n    const json = generateJson();\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${configFileName}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"JSON Exported\",\n      description: `Configuration exported as ${configFileName}.json`,\n    });\n  };\n\n  const toggleLanguage = () => {\n    setLanguage(language === 'en' ? 'ja' : 'en');\n  };\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  // Save session handler with auto-save (no prompts)\n  const handleSaveSession = async () => {\n    try {\n      setIsSaving(true);\n      \n      // Create the complete configuration data including all state\n      const completeConfigData = {\n        plcs: [{\n          plc_name: plcName,\n          plc_ip: plcIp,\n          opcua_url: opcuaUrl,\n          address_mappings: addressMappings\n        }],\n        // Additional state data for full restoration\n        plc_no: plcNo,\n        config_file_name: configFileName,\n        config_description: configDescription,\n        selected_memory_areas: Array.from(selectedMemoryAreas),\n        selected_registers: Array.from(selectedRegisters),\n        deselected_keys: Array.from(deselectedKeys),\n        parse_result: parseResult\n      };\n\n      // Always create new session using PLC Name - never overwrite existing sessions\n      const sessionName = plcName || 'Unnamed PLC';\n      \n      const response = await fetch('/api/plc-configurations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: sessionName,\n          description: configDescription || null,\n          config_data: completeConfigData\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to save session');\n      }\n\n      queryClient.invalidateQueries({ queryKey: ['/api/plc-configurations'] });\n      \n      toast({\n        title: \"Session Saved\",\n        description: `Session \"${sessionName}\" has been saved successfully.`,\n      });\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save the session. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Load session handler with complete state restoration\n  const handleLoadSession = async (sessionId: string) => {\n    try {\n      const response = await fetch(`/api/plc-configurations/${sessionId}`);\n      if (!response.ok) throw new Error('Failed to load session');\n      \n      const session: PlcConfiguration = await response.json();\n      const configData = session.config_data as any; // Use any for extended structure\n      \n      if (configData.plcs && configData.plcs.length > 0) {\n        const plcConfig = configData.plcs[0];\n        \n        // Restore basic configuration state\n        setPlcName(plcConfig.plc_name);\n        setPlcIp(plcConfig.plc_ip);\n        setOpcuaUrl(plcConfig.opcua_url);\n        setAddressMappings(plcConfig.address_mappings);\n        setConfigFileName(session.name);\n        setConfigDescription(session.description || \"\");\n        \n        // Restore extended state if available\n        if (configData.plc_no !== undefined) {\n          setPlcNo(configData.plc_no);\n        }\n        if (configData.selected_memory_areas) {\n          setSelectedMemoryAreas(new Set(configData.selected_memory_areas));\n        }\n        if (configData.selected_registers) {\n          setSelectedRegisters(new Set(configData.selected_registers));\n        }\n        if (configData.deselected_keys) {\n          setDeselectedKeys(new Set(configData.deselected_keys));\n        }\n        if (configData.parse_result) {\n          setParseResult(configData.parse_result);\n        }\n        \n        // Set current session ID for future saves\n        setCurrentSessionId(sessionId);\n        \n        toast({\n          title: \"Session Loaded\",\n          description: `Session \"${session.name}\" has been loaded successfully.`,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      toast({\n        title: \"Load Failed\",\n        description: \"Failed to load the session. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // New session handler\n  const handleNewSession = () => {\n    if (window.confirm(\"Create a new session? This will clear your current configuration.\")) {\n      setPlcName(\"PLC1\");\n      setPlcIp(\"192.168.2.2\");\n      setOpcuaUrl(\"opc.tcp://192.168.1.20:4840\");\n      setAddressMappings([\n        { plc_reg_add: \"2.01\", data_type: \"BOOL\", opcua_reg_add: \"BOOL_VAR01\" },\n        { plc_reg_add: \"C0001\", data_type: \"WORD\", opcua_reg_add: \"INT_VAR01\" }\n      ]);\n      setConfigFileName(\"plc_config\");\n      setConfigDescription(\"\");\n      setPlcNo(1);\n      setCurrentSessionId(null); // Clear current session ID\n      setSelectedMemoryAreas(new Set(['I/O', 'A', 'C', 'D', 'E', 'T', 'H']));\n      setSelectedRegisters(new Set());\n      setDeselectedKeys(new Set());\n      setParseResult(null);\n      \n      toast({\n        title: \"New Session\",\n        description: \"New session created. You can now configure your PLC settings.\",\n      });\n    }\n  };\n\n  // Analysis functions for overview\n  const analyzeAddressMappings = () => {\n    const memoryAreaCounts = new Map<string, number>();\n    const memoryAreaAddresses = new Map<string, string[]>();\n    const datatypeCounts = new Map<string, number>();\n    const datatypeAddresses = new Map<string, string[]>();\n    const otherDatatypes = new Set<string>();\n    \n    // Get boolean channel addresses from parse result\n    const booleanChannelAddresses = parseResult?.booleanChannelAddresses || [];\n    \n    const standardDatatypes = new Set(['int16', 'int32', 'float32', 'bool', 'string', 'CHANNEL', 'BOOL', 'WORD', 'UDINT', 'DWORD', 'INT', 'REAL', 'LREAL']);\n    \n    addressMappings.forEach(mapping => {\n      // Extract memory area from register address\n      const firstChar = mapping.plc_reg_add.charAt(0).toUpperCase();\n      \n      let memoryArea: string;\n      \n      // Group I and O into I/O, and numeric addresses (starting with digit) as I/O\n      if (firstChar === 'I' || firstChar === 'O' || /^\\d/.test(mapping.plc_reg_add)) {\n        memoryArea = 'I/O';\n      } else if (['A', 'C', 'D', 'E', 'T', 'H'].includes(firstChar)) {\n        memoryArea = firstChar;\n      } else {\n        return; // Skip unsupported memory areas\n      }\n      \n      // Count and store addresses for each memory area\n      memoryAreaCounts.set(memoryArea, (memoryAreaCounts.get(memoryArea) || 0) + 1);\n      if (!memoryAreaAddresses.has(memoryArea)) {\n        memoryAreaAddresses.set(memoryArea, []);\n      }\n      memoryAreaAddresses.get(memoryArea)!.push(mapping.plc_reg_add);\n      \n      // Count and store addresses for each datatype\n      if (standardDatatypes.has(mapping.data_type)) {\n        datatypeCounts.set(mapping.data_type, (datatypeCounts.get(mapping.data_type) || 0) + 1);\n        if (!datatypeAddresses.has(mapping.data_type)) {\n          datatypeAddresses.set(mapping.data_type, []);\n        }\n        datatypeAddresses.get(mapping.data_type)!.push(mapping.plc_reg_add);\n      } else {\n        otherDatatypes.add(mapping.data_type);\n      }\n    });\n    \n    return { memoryAreaCounts, memoryAreaAddresses, datatypeCounts, datatypeAddresses, otherDatatypes, booleanChannelAddresses };\n  };\n\n  const toggleMemoryArea = (area: string) => {\n    const newSelected = new Set(selectedMemoryAreas);\n    if (newSelected.has(area)) {\n      newSelected.delete(area);\n    } else {\n      newSelected.add(area);\n    }\n    setSelectedMemoryAreas(newSelected);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"container-plc-config\">\n      {/* Navigation Bar */}\n      <nav className=\"bg-card border-b border-border shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-full px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Left: Menu Button and Sessions */}\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleSidebar}\n                className=\"p-2\"\n                data-testid=\"button-menu-toggle\"\n              >\n                <Menu className=\"w-5 h-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSaveSession}\n                disabled={isSaving}\n                className=\"p-2\"\n                data-testid=\"button-save-session\"\n              >\n                <Save className=\"w-4 h-4\" />\n              </Button>\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <span className=\"text-sm font-medium text-muted-foreground\" data-testid=\"text-session\">\n                  {t('sessionText')} {plcName}\n                </span>\n              </div>\n            </div>\n            \n            {/* Center: Title and Date */}\n            <div className=\"flex flex-col items-center\">\n              <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-main-title\">\n                {t('mainTitle')}\n              </h1>\n              <span className=\"text-xs text-muted-foreground\" data-testid=\"text-current-date\">\n                {currentDate}\n              </span>\n            </div>\n            \n            {/* Right: Language Toggle */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={toggleLanguage}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-language-toggle\"\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">{t('currentLang')}</span>\n                <ChevronDown className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen} \n        onClose={() => setSidebarOpen(false)} \n        onToggle={toggleSidebar} \n        plcName={plcName}\n        onLoadSession={handleLoadSession}\n        onNewSession={handleNewSession}\n      />\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        \n        {/* File Configuration Section */}\n        <Card className=\"mb-6\" data-testid=\"card-file-config\">\n          <CardHeader>\n            <CardTitle data-testid=\"text-config-title\">{t('configTitle')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"configFileName\" data-testid=\"label-file-name\">\n                  {t('fileNameLabel')}\n                </Label>\n                <div className=\"flex items-center mt-1\">\n                  <Input\n                    id=\"configFileName\"\n                    value={configFileName}\n                    onChange={(e) => setConfigFileName(e.target.value)}\n                    className=\"rounded-r-none\"\n                    data-testid=\"input-file-name\"\n                  />\n                  <span className=\"inline-flex items-center px-3 py-2 border border-l-0 border-input bg-muted text-muted-foreground text-sm rounded-r-md\">\n                    .json\n                  </span>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"configDescription\" data-testid=\"label-description\">\n                  {t('descriptionLabel')}\n                </Label>\n                <Input\n                  id=\"configDescription\"\n                  value={configDescription}\n                  onChange={(e) => setConfigDescription(e.target.value)}\n                  placeholder={t('enterDescription')}\n                  className=\"mt-1\"\n                  data-testid=\"input-description\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* File Upload Card */}\n        {showUploadCard && (\n          <FileUploadCard \n            onFileProcessed={(mappings, result) => handleFileProcessed(mappings, result)}\n            plcNo={typeof plcNo === 'number' ? plcNo : parseInt(plcNo.toString()) || 1}\n          />\n        )}\n\n        {/* PLC Configuration Section */}\n        <Card className=\"mb-6\" data-testid=\"card-plc-config\">\n          <CardHeader>\n            <CardTitle data-testid=\"text-plc-config-title\">{t('plcConfigTitle')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"plcNo\" data-testid=\"label-plc-no\">\n                  {t('plcNoLabel')}\n                </Label>\n                <Input\n                  id=\"plcNo\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={plcNo}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    if (value === '') {\n                      setPlcNo('');\n                    } else {\n                      const numValue = parseInt(value);\n                      if (!isNaN(numValue) && numValue > 0) {\n                        setPlcNo(numValue);\n                      }\n                    }\n                  }}\n                  onBlur={(e) => {\n                    if (e.target.value === '') {\n                      setPlcNo(1);\n                    }\n                  }}\n                  className={`mt-1 transition-all duration-200 ${\n                    plcNo === 1 || plcNo === '1' ? 'text-muted-foreground font-light' : 'text-foreground font-semibold'\n                  }`}\n                  data-testid=\"input-plc-no\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"plcName\" data-testid=\"label-plc-name\">\n                  {t('plcNameLabel')}\n                </Label>\n                <Input\n                  id=\"plcName\"\n                  value={plcName}\n                  onChange={(e) => setPlcName(e.target.value)}\n                  className={`mt-1 transition-all duration-200 ${\n                    plcName === 'PLC1' ? 'text-muted-foreground font-light' : 'text-foreground font-semibold'\n                  }`}\n                  data-testid=\"input-plc-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"plcIp\" data-testid=\"label-plc-ip\">\n                  {t('plcIpLabel')}\n                </Label>\n                <Input\n                  id=\"plcIp\"\n                  value={plcIp}\n                  onChange={(e) => setPlcIp(e.target.value)}\n                  className={`mt-1 transition-all duration-200 ${\n                    plcIp === '192.168.2.2' ? 'text-muted-foreground font-light' : 'text-foreground font-semibold'\n                  }`}\n                  data-testid=\"input-plc-ip\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"opcuaUrl\" data-testid=\"label-opcua-url\">\n                  {t('opcuaUrlLabel')}\n                </Label>\n                <Input\n                  id=\"opcuaUrl\"\n                  value={opcuaUrl}\n                  onChange={(e) => setOpcuaUrl(e.target.value)}\n                  className={`mt-1 transition-all duration-200 ${\n                    opcuaUrl === 'opc.tcp://192.168.1.20:4840' ? 'text-muted-foreground font-light' : 'text-foreground font-semibold'\n                  }`}\n                  data-testid=\"input-opcua-url\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Expandable Sections */}\n        <div className=\"space-y-4\">\n          {/* Overview Details Section */}\n          <Card data-testid=\"card-overview\">\n            <Collapsible open={overviewExpanded} onOpenChange={setOverviewExpanded}>\n              <CollapsibleTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full p-4 justify-between text-left hover:bg-muted\"\n                  data-testid=\"button-overview-toggle\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <BarChart className=\"w-5 h-5 text-primary\" />\n                    <span className=\"text-lg font-medium text-foreground\">\n                      {t('overviewTitle')}\n                    </span>\n                  </div>\n                  <ChevronDown \n                    className={`w-4 h-4 text-muted-foreground transition-transform ${\n                      overviewExpanded ? 'rotate-180' : ''\n                    }`} \n                  />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent>\n                <div className=\"p-4 border-t border-border\" data-testid=\"content-overview\">\n                  {(() => {\n                    const { memoryAreaCounts, memoryAreaAddresses, datatypeCounts, datatypeAddresses, otherDatatypes, booleanChannelAddresses } = analyzeAddressMappings();\n                    const standardMemoryAreas = ['I/O', 'A', 'C', 'D', 'E', 'T', 'H'];\n                    \n                    return (\n                      <div className=\"space-y-6\">\n                        {/* Total Variables Imported and Skipped Records */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"stat-total-variables\">\n                            <div className=\"text-2xl font-bold text-primary\">{addressMappings.length}</div>\n                            <div className=\"text-sm text-muted-foreground\">{t('totalVariables')}</div>\n                          </div>\n                          \n                          {/* Show skipped records count from file upload results if available */}\n                          {parseResult && parseResult.stats.skippedRecords > 0 && (\n                            <Collapsible>\n                              <CollapsibleTrigger asChild>\n                                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg cursor-pointer hover:bg-orange-100 dark:hover:bg-orange-900/30 transition-colors\" data-testid=\"stat-skipped-records\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div>\n                                      <div className=\"text-2xl font-bold text-orange-600\">{parseResult.stats.skippedRecords}</div>\n                                      <div className=\"text-sm text-muted-foreground\">Skipped Records</div>\n                                    </div>\n                                    <ChevronDown className=\"w-4 h-4 text-muted-foreground\" />\n                                  </div>\n                                </div>\n                              </CollapsibleTrigger>\n                              <CollapsibleContent>\n                                <div className=\"mt-2 p-3 bg-orange-50 dark:bg-orange-900/20 rounded border-l-4 border-orange-500\">\n                                  <h4 className=\"font-medium text-orange-800 dark:text-orange-200 mb-2\">Skipped Addresses:</h4>\n                                  <div className=\"space-y-1 max-h-40 overflow-y-auto\">\n                                    {parseResult.skippedAddresses.map((skipped, index) => (\n                                      <div key={index} className=\"text-xs bg-white dark:bg-gray-800 p-2 rounded border\">\n                                        <div className=\"font-mono text-orange-700 dark:text-orange-300\">{skipped.address}</div>\n                                        <div className=\"text-gray-600 dark:text-gray-400\">{skipped.data_type} - {skipped.reason}</div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              </CollapsibleContent>\n                            </Collapsible>\n                          )}\n                        </div>\n\n                        {/* Memory Areas */}\n                        <div className=\"space-y-3\" data-testid=\"section-memory-areas\">\n                          <h3 className=\"text-lg font-semibold text-foreground\">{t('memoryAreas')}</h3>\n                          <div className=\"grid grid-cols-3 md:grid-cols-7 gap-3\">\n                            {standardMemoryAreas.map(area => {\n                              const count = memoryAreaCounts.get(area) || 0;\n                              const addresses = memoryAreaAddresses.get(area) || [];\n                              return (\n                                <Collapsible key={area}>\n                                  <div className=\"flex flex-col\">\n                                    <div className=\"flex items-center justify-between p-3 rounded border bg-muted\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <input\n                                          type=\"checkbox\"\n                                          id={`memory-${area}`}\n                                          checked={selectedMemoryAreas.has(area)}\n                                          onChange={() => toggleMemoryArea(area)}\n                                          className=\"w-4 h-4\"\n                                          data-testid={`checkbox-memory-${area}`}\n                                        />\n                                        <label htmlFor={`memory-${area}`} className=\"text-sm font-medium cursor-pointer\">\n                                          {area}\n                                        </label>\n                                      </div>\n                                      <div className=\"flex items-center space-x-1\">\n                                        <span className=\"text-sm font-bold text-primary\">{count}</span>\n                                        {count > 0 && (\n                                          <CollapsibleTrigger asChild>\n                                            <button className=\"p-1 hover:bg-background rounded\" data-testid={`expand-memory-${area}`}>\n                                              <ChevronDown className=\"w-3 h-3 text-muted-foreground\" />\n                                            </button>\n                                          </CollapsibleTrigger>\n                                        )}\n                                      </div>\n                                    </div>\n                                    {count > 0 && (\n                                      <CollapsibleContent>\n                                        <div className=\"mt-1 p-2 bg-muted/50 rounded border-l-2 border-primary/30\">\n                                          <div className=\"max-h-32 overflow-y-auto\">\n                                            <div className=\"space-y-1\">\n                                              {addresses.map((address, index) => (\n                                                <div key={index} className=\"text-xs font-mono bg-white dark:bg-gray-800 px-2 py-1 rounded border\">\n                                                  {address}\n                                                </div>\n                                              ))}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </CollapsibleContent>\n                                    )}\n                                  </div>\n                                </Collapsible>\n                              );\n                            })}\n                          </div>\n                        </div>\n\n                        {/* Datatypes Found */}\n                        <div className=\"space-y-3\" data-testid=\"section-datatypes\">\n                          <h3 className=\"text-lg font-semibold text-foreground\">{t('datatypesFound')}</h3>\n                          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\n                            {Array.from(datatypeCounts.entries()).map(([datatype, count]) => {\n                              const addresses = datatypeAddresses.get(datatype) || [];\n                              return (\n                                <Collapsible key={datatype}>\n                                  <div className=\"flex flex-col\">\n                                    <div className=\"bg-muted p-3 rounded-lg\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"text-center flex-1\">\n                                          <div className=\"text-lg font-bold text-primary\">{count}</div>\n                                          <div className=\"text-xs text-muted-foreground uppercase\">{datatype}</div>\n                                        </div>\n                                        {count > 0 && (\n                                          <CollapsibleTrigger asChild>\n                                            <button className=\"p-1 hover:bg-background rounded ml-2\" data-testid={`expand-datatype-${datatype}`}>\n                                              <ChevronDown className=\"w-3 h-3 text-muted-foreground\" />\n                                            </button>\n                                          </CollapsibleTrigger>\n                                        )}\n                                      </div>\n                                    </div>\n                                    {count > 0 && (\n                                      <CollapsibleContent>\n                                        <div className=\"mt-1 p-2 bg-muted/50 rounded border-l-2 border-primary/30\">\n                                          <div className=\"max-h-32 overflow-y-auto\">\n                                            <div className=\"space-y-1\">\n                                              {addresses.map((address, index) => (\n                                                <div key={index} className=\"text-xs font-mono bg-white dark:bg-gray-800 px-2 py-1 rounded border\">\n                                                  {address}\n                                                </div>\n                                              ))}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </CollapsibleContent>\n                                    )}\n                                  </div>\n                                </Collapsible>\n                              );\n                            })}\n                            \n                            {/* BOOL CHANNEL datatype with orange color */}\n                            {booleanChannelAddresses.length > 0 && (\n                              <Collapsible key=\"BOOL CHANNEL\">\n                                <div className=\"flex flex-col\">\n                                  <div className=\"bg-muted p-3 rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"text-center flex-1\">\n                                        <div className=\"text-lg font-bold text-primary\">{booleanChannelAddresses.length}</div>\n                                        <div className=\"text-xs text-orange-600 dark:text-orange-400 uppercase font-medium\">{t('boolChannel')}</div>\n                                      </div>\n                                      <CollapsibleTrigger asChild>\n                                        <button className=\"p-1 hover:bg-background rounded ml-2\" data-testid=\"expand-datatype-bool-channel\">\n                                          <ChevronDown className=\"w-3 h-3 text-muted-foreground\" />\n                                        </button>\n                                      </CollapsibleTrigger>\n                                    </div>\n                                  </div>\n                                  <CollapsibleContent>\n                                    <div className=\"mt-1 p-2 bg-muted/50 rounded border-l-2 border-orange-400/30\">\n                                      <div className=\"max-h-32 overflow-y-auto\">\n                                        <div className=\"space-y-1\">\n                                          {booleanChannelAddresses.map((address: string, index: number) => (\n                                            <div key={index} className=\"text-xs font-mono bg-white dark:bg-gray-800 px-2 py-1 rounded border\">\n                                              {address}\n                                            </div>\n                                          ))}\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </CollapsibleContent>\n                                </div>\n                              </Collapsible>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Other Datatypes */}\n                        {otherDatatypes.size > 0 && (\n                          <div className=\"space-y-3 bg-gray-100 dark:bg-gray-800 p-4 rounded-lg\" data-testid=\"section-other-datatypes\">\n                            <h3 className=\"text-lg font-semibold text-foreground\">{t('otherDatatypes')}</h3>\n                            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\n                              {Array.from(otherDatatypes).map(datatype => (\n                                <div key={datatype} className=\"bg-muted p-3 rounded-lg text-center\">\n                                  <div className=\"text-lg font-bold text-amber-600\">?</div>\n                                  <div className=\"text-xs text-muted-foreground uppercase\">{datatype}</div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })()}\n                </div>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n\n          {/* PLC Register Details Section */}\n          <Card data-testid=\"card-details\">\n            <Collapsible open={detailsExpanded} onOpenChange={setDetailsExpanded}>\n              <CollapsibleTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full p-4 justify-between text-left hover:bg-muted\"\n                  data-testid=\"button-details-toggle\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <Table className=\"w-5 h-5 text-primary\" />\n                    <span className=\"text-lg font-medium text-foreground\">\n                      {t('detailsTitle')}\n                    </span>\n                  </div>\n                  <ChevronDown \n                    className={`w-4 h-4 text-muted-foreground transition-transform ${\n                      detailsExpanded ? 'rotate-180' : ''\n                    }`} \n                  />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent>\n                <div className=\"p-4 border-t border-border\" data-testid=\"content-details\">\n                  <div className=\"mb-4 flex justify-end space-x-2\">\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => setShowOpcuaListModal(true)}\n                      className=\"flex items-center space-x-2 bg-orange-100 hover:bg-orange-200 text-orange-800 border-orange-300 dark:bg-orange-900/20 dark:hover:bg-orange-900/30 dark:text-orange-200 dark:border-orange-800\"\n                      data-testid=\"button-generate-opcua-list\"\n                    >\n                      <List className=\"w-4 h-4\" />\n                      <span>Generate OPCUA LIST</span>\n                    </Button>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => setShowJsonModal(true)}\n                      className=\"flex items-center space-x-2\"\n                      data-testid=\"button-preview-json\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                      <span>{t('previewText')}</span>\n                    </Button>\n                    <Button\n                      onClick={handleExportJson}\n                      className=\"flex items-center space-x-2\"\n                      data-testid=\"button-export-json\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      <span>{t('exportText')}</span>\n                    </Button>\n                  </div>\n                  \n                  {/* Register Search */}\n                  <div className=\"mb-4\">\n                    <Input\n                      type=\"text\"\n                      placeholder='Search registers by address, OPC UA name, or description...'\n                      value={registerSearchTerm}\n                      onChange={(e) => setRegisterSearchTerm(e.target.value)}\n                      className=\"max-w-md\"\n                      data-testid=\"input-register-search\"\n                    />\n                  </div>\n                  \n                  <AddressMappingsTable \n                    mappings={addressMappings}\n                    onMappingsChange={setAddressMappings}\n                    selectedMemoryAreas={selectedMemoryAreas}\n                    onSelectedRegistersChange={setSelectedRegisters}\n                    plcNo={plcNo}\n                    searchTerm={registerSearchTerm}\n                    deselectedKeys={deselectedKeys}\n                    onDeselectedKeysChange={setDeselectedKeys}\n                  />\n                </div>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n\n          {/* JSON buttons outside the card */}\n          <div className=\"mt-4 flex justify-center space-x-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowOpcuaListModal(true)}\n              className=\"flex items-center space-x-2 bg-orange-100 hover:bg-orange-200 text-orange-800 border-orange-300 dark:bg-orange-900/20 dark:hover:bg-orange-900/30 dark:text-orange-200 dark:border-orange-800\"\n              data-testid=\"button-generate-opcua-list-outside\"\n            >\n              <List className=\"w-4 h-4\" />\n              <span>Generate OPCUA LIST</span>\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowJsonModal(true)}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-preview-json-outside\"\n            >\n              <Eye className=\"w-4 h-4\" />\n              <span>{t('previewText')}</span>\n            </Button>\n            <Button\n              onClick={handleExportJson}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-export-json-outside\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>{t('exportText')}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* JSON Preview Modal */}\n      <JsonPreviewModal \n        isOpen={showJsonModal}\n        onClose={() => setShowJsonModal(false)}\n        jsonContent={generateJson()}\n      />\n      \n      {/* OPCUA List Modal */}\n      <Dialog open={showOpcuaListModal} onOpenChange={setShowOpcuaListModal}>\n        <DialogContent className=\"max-w-4xl max-h-96 flex flex-col\" data-testid=\"modal-opcua-list\">\n          <DialogHeader>\n            <DialogTitle data-testid=\"text-opcua-modal-title\">OPCUA Register List</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-auto\">\n            <pre \n              className=\"bg-muted p-4 rounded text-sm overflow-auto font-mono\"\n              data-testid=\"text-opcua-content\"\n            >\n              {generateOpcuaList()}\n            </pre>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":45811},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { Microchip, Plus, ChevronLeft, ChevronRight, Search, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { PlcConfiguration } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onToggle: () => void;\n  plcName: string;\n  onLoadSession?: (sessionId: string) => void;\n  onNewSession?: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose, onToggle, plcName, onLoadSession, onNewSession }: SidebarProps) {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all saved sessions\n  const { data: sessions = [], isLoading } = useQuery<PlcConfiguration[]>({\n    queryKey: ['/api/plc-configurations'],\n    enabled: isOpen, // Only fetch when sidebar is open\n  });\n\n  // Delete session mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (sessionId: string) => {\n      console.log(`Attempting to delete session: ${sessionId}`);\n      const response = await fetch(`/api/plc-configurations/${sessionId}`, {\n        method: 'DELETE',\n      });\n      console.log(`Delete response status: ${response.status}`);\n      if (!response.ok) {\n        throw new Error(`Failed to delete session. Status: ${response.status}`);\n      }\n      return sessionId;\n    },\n    onSuccess: (sessionId) => {\n      console.log(`Delete successful for session: ${sessionId}, invalidating queries`);\n      queryClient.invalidateQueries({ queryKey: ['/api/plc-configurations'] });\n    },\n    onError: (error) => {\n      console.error('Delete mutation error:', error);\n    }\n  });\n\n  // Filter sessions based on search query\n  const filteredSessions = sessions.filter((session: PlcConfiguration) =>\n    session.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (session.description && session.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleDeleteSession = (sessionId: string, sessionName: string, e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent triggering the load session\n    e.preventDefault();\n    \n    console.log(`Delete button clicked for session: ${sessionName} (${sessionId})`);\n    \n    const confirmed = window.confirm(`Are you sure you want to delete the session \"${sessionName}\"?`);\n    console.log(`Confirmation result: ${confirmed}`);\n    \n    if (confirmed) {\n      console.log(`Proceeding with deletion of session: ${sessionId}`);\n      deleteMutation.mutate(sessionId);\n    }\n  };\n\n  const handleLoadSession = (sessionId: string) => {\n    onLoadSession?.(sessionId);\n    onClose(); // Close sidebar after loading\n  };\n\n  const handleNewSession = () => {\n    onNewSession?.();\n    onClose(); // Close sidebar after creating new session\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-30\"\n          onClick={onClose}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div \n        className={`fixed left-0 top-16 h-full w-64 bg-card border-r border-border shadow-lg transform transition-all duration-300 ease-in-out z-40 ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}\n        data-testid=\"sidebar\"\n      >\n        {/* Sidebar Toggle Button */}\n        <div className=\"absolute -right-12 top-4\">\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={onToggle}\n            className=\"w-10 h-10 p-0 rounded-r-lg rounded-l-none border-l-0 shadow-md hover:shadow-lg transition-shadow\"\n            data-testid=\"button-sidebar-toggle\"\n          >\n            {isOpen ? (\n              <ChevronLeft className=\"w-4 h-4\" />\n            ) : (\n              <ChevronRight className=\"w-4 h-4\" />\n            )}\n          </Button>\n        </div>\n\n        <div className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-sidebar-title\">\n              {t('sidebarTitle')}\n            </h2>\n          </div>\n          \n          {/* Search Input */}\n          <div className=\"relative mb-4\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              type=\"text\"\n              placeholder={t('searchSessions')}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 text-sm\"\n              data-testid=\"input-search-sessions\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            {/* Active Session */}\n            <div className=\"p-3 rounded-lg bg-primary text-primary-foreground\" data-testid=\"card-active-session\">\n              <div className=\"flex items-center space-x-2\">\n                <Microchip className=\"w-4 h-4\" />\n                <span className=\"font-medium\">{plcName}</span>\n              </div>\n              <div className=\"text-sm opacity-90 mt-1\">Active Session</div>\n            </div>\n            \n            {/* New Session Button */}\n            <div \n              className=\"p-3 rounded-lg border border-border hover:bg-muted cursor-pointer transition-colors\"\n              onClick={handleNewSession}\n              data-testid=\"button-new-session\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <Plus className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-muted-foreground\">{t('newSessionText')}</span>\n              </div>\n            </div>\n\n            {/* Saved Sessions */}\n            <div className=\"border-t border-border pt-2 mt-4\">\n              <div className=\"text-sm font-medium text-muted-foreground mb-2\">\n                Saved Sessions\n              </div>\n              \n              {isLoading ? (\n                <div className=\"p-3 text-center text-muted-foreground text-sm\">\n                  Loading sessions...\n                </div>\n              ) : filteredSessions.length === 0 ? (\n                <div className=\"p-3 text-center text-muted-foreground text-sm\">\n                  {searchQuery ? 'No sessions match your search' : 'No saved sessions yet'}\n                </div>\n              ) : (\n                <div className=\"space-y-1 max-h-64 overflow-y-auto\">\n                  {filteredSessions.map((session: PlcConfiguration) => (\n                    <div\n                      key={session.id}\n                      className=\"p-3 rounded-lg border border-border hover:bg-muted cursor-pointer transition-colors group\"\n                      onClick={() => handleLoadSession(session.id)}\n                      data-testid={`button-load-session-${session.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Microchip className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n                            <span className=\"font-medium text-sm truncate\">{session.name}</span>\n                          </div>\n                          {session.description && (\n                            <div className=\"text-xs text-muted-foreground mt-1 truncate\">\n                              {session.description}\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {session.created_at ? new Date(session.created_at).toLocaleDateString() : 'No date'}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"ml-2 flex-shrink-0 h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={(e) => handleDeleteSession(session.id, session.name, e)}\n                          data-testid={`button-delete-session-${session.id}`}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":8843},"client/src/hooks/use-language.tsx":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport { translations, type TranslationKey } from \"@/lib/translations\";\n\ninterface LanguageContextType {\n  language: 'en' | 'ja';\n  setLanguage: (lang: 'en' | 'ja') => void;\n  t: (key: TranslationKey) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<'en' | 'ja'>('en');\n\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('plc-config-language') as 'en' | 'ja';\n    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'ja')) {\n      setLanguage(savedLanguage);\n    }\n  }, []);\n\n  const handleSetLanguage = (lang: 'en' | 'ja') => {\n    setLanguage(lang);\n    localStorage.setItem('plc-config-language', lang);\n  };\n\n  const t = (key: TranslationKey): string => {\n    return translations[language][key] || translations.en[key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":1376},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/plc-parser.ts":{"content":"// PLC Address Parser - Based on Python parsing logic\nimport type { AddressMapping } from \"@shared/schema\";\n\n// Data type dictionary for other data types (key: data_type, value: suffix_number)\nconst DATA_TYPE_DICTIONARY: { [key: string]: number } = {\n  'UDINT': 2,\n  'WORD': 1,\n  'DWORD': 3,\n  'INT': 1,\n  'REAL': 4,\n  'LREAL': 8\n};\n\nexport interface ParsedRecord {\n  data_type: string;\n  address: string;\n  description: string;\n  value?: string;\n}\n\nexport interface ParseResult {\n  addressMappings: AddressMapping[];\n  stats: {\n    totalRecords: number;\n    validRecords: number;\n    skippedRecords: number;\n    booleanChannels: number;\n  };\n  skippedAddresses: Array<{\n    address: string;\n    data_type: string;\n    description: string;\n    reason: string;\n  }>;\n  booleanChannelAddresses: string[]; // Base addresses that represent combined boolean channels\n}\n\n/**\n * Normalize E-type addresses:\n * - If length == 4 (e.g., E0999), convert to E00999 (add 0 after E)\n * - If length == 5 (e.g., E1000), keep as is\n */\nexport function normalizeEAddress(address: string): string {\n  if (address.startsWith('E')) {\n    const numericPart = address.slice(1);\n    if (numericPart.length === 4) {\n      return 'E0' + numericPart;\n    } else if (numericPart.length === 3) {\n      return 'E00' + numericPart;\n    } else if (numericPart.length === 2) {\n      return 'E000' + numericPart;\n    } else if (numericPart.length === 1) {\n      return 'E0000' + numericPart;\n    }\n  }\n  return address;\n}\n\n/**\n * Normalize boolean addresses according to special conditions:\n * a) If address is just a number (like \"1100\"), convert to \"1100.00\"\n * b) If address has single digit after decimal (like \"1100.1\"), convert to \"1100.10\"\n */\nexport function normalizeBooleanAddress(address: string): string {\n  if (!address.includes('.')) {\n    // Case a: Just a number, add .00\n    return `${address}.00`;\n  } else {\n    // Case b: Has decimal point, check if bit position needs padding\n    const [baseAddress, bitPosition] = address.split('.', 2);\n    \n    // If single digit, treat as tens place: \"1\" -> \"10\", \"2\" -> \"20\", etc.\n    // If two digits, keep as is: \"01\" -> \"01\", \"13\" -> \"13\"\n    let normalizedBit: string;\n    if (bitPosition.length === 1) {\n      normalizedBit = bitPosition + '0'; // \"1\" becomes \"10\"\n    } else {\n      normalizedBit = bitPosition; // \"01\" stays \"01\"\n    }\n    \n    return `${baseAddress}.${normalizedBit}`;\n  }\n}\n\n/**\n * Extract the memory area prefix from an address.\n * Returns the first letter of the address (e.g., 'A' from 'A200', 'D' from 'D1000')\n * For numeric addresses, returns 'IO' as default.\n */\nexport function getMemoryAreaPrefix(address: string): string {\n  if (!address) {\n    return 'IO';\n  }\n  \n  if (/^\\d/.test(address)) {\n    return 'IO'; // Use 'IO' for numeric addresses\n  }\n  \n  return address[0].toUpperCase();\n}\n\n/**\n * Generate OPCUA naming convention with format: P{plc_number}_{memory_prefix}_{reg_address}_{suffix}\n */\nexport function generateOpcuaName(\n  address: string, \n  dataType: string, \n  bitPosition?: string, \n  isBooleanChannel: boolean = false, \n  plcNumber: number = 1\n): string {\n  const memoryPrefix = getMemoryAreaPrefix(address);\n  \n  // Extract the numeric part of the address\n  const regAddress = /^\\d/.test(address) ? address : address.slice(1);\n  \n  // Handle different cases\n  if (dataType === 'BOOL') {\n    if (isBooleanChannel) {\n      // Case a: Multiple bool to type channel\n      return `P${plcNumber}_${memoryPrefix}_${regAddress}_BC`;\n    } else {\n      // Case b: Individual boolean\n      const bitNum = bitPosition || \"00\";\n      return `P${plcNumber}_${memoryPrefix}_${regAddress}_B${bitNum}`;\n    }\n  } else if (dataType === 'CHANNEL' || dataType === 'channel') {\n    // Case c: For channel\n    return `P${plcNumber}_${memoryPrefix}_${regAddress}_C`;\n  } else if (dataType === 'MODIFIED CHANNEL' || dataType === 'modified channel') {\n    // Case c2: For modified channel (boolean channel equivalent)\n    return `P${plcNumber}_${memoryPrefix}_${regAddress}_BC`;\n  } else {\n    // Case d: Other data types\n    const suffixValue = DATA_TYPE_DICTIONARY[dataType.toUpperCase()] || 1;\n    return `P${plcNumber}_${memoryPrefix}_${regAddress}_W${suffixValue}`;\n  }\n}\n\n/**\n * Check if the address starts with supported memory area prefixes.\n * Supported areas: D, W, H, A, E, T, C (and numeric addresses)\n */\nexport function isSupportedMemoryArea(address: string): boolean {\n  if (!address) {\n    return false;\n  }\n  \n  // Check for two-character memory areas (like CF) - not supported\n  if (address.length >= 3 && !/[\\d.]/.test(address[1])) {\n    return false;\n  }\n  \n  // Check if address starts with a digit (numeric addresses)\n  if (/^\\d/.test(address)) {\n    return true;\n  }\n  \n  // Check if address starts with supported memory area prefixes\n  const supportedPrefixes = ['D', 'W', 'H', 'A', 'E', 'T', 'C'];\n  return supportedPrefixes.some(prefix => address.startsWith(prefix));\n}\n\n/**\n * Parse CSV data and create address mappings using the Python logic\n */\nexport function parseCSVData(csvData: string[][], plcNumber: number = 1): ParseResult {\n  const booleanGroups = new Map<string, Array<{\n    originalAddress: string;\n    normalizedAddress: string;\n    bitPosition: string;\n    description: string;\n    value: string;\n  }>>();\n  \n  const otherMappings: AddressMapping[] = [];\n  const skippedAddresses: Array<{\n    address: string;\n    data_type: string;\n    description: string;\n    reason: string;\n  }> = [];\n\n  // Process each CSV row\n  for (const row of csvData) {\n    if (row.length < 4) continue; // Ensure we have enough columns\n    \n    const item: ParsedRecord = {\n      data_type: row[1],\n      address: row[2],\n      description: row[3],\n      value: row[4] || '0'\n    };\n\n    // Check if address is supported\n    if (!isSupportedMemoryArea(item.address)) {\n      skippedAddresses.push({\n        address: item.address,\n        data_type: item.data_type,\n        description: item.description,\n        reason: 'Unsupported memory area'\n      });\n      continue;\n    }\n\n    // Apply E address normalization\n    const originalAddress = item.address;\n    let normalizedAddress = normalizeEAddress(originalAddress);\n    \n    if (item.data_type === 'BOOL') {\n      // Normalize the boolean address according to special conditions\n      normalizedAddress = normalizeBooleanAddress(normalizedAddress);\n      \n      // Extract base address and bit position from normalized address\n      const [baseAddress, bitPosition] = normalizedAddress.split('.');\n      \n      // Group addresses with the same base\n      if (!booleanGroups.has(baseAddress)) {\n        booleanGroups.set(baseAddress, []);\n      }\n      booleanGroups.get(baseAddress)!.push({\n        originalAddress,\n        normalizedAddress,\n        bitPosition,\n        description: item.description,\n        value: item.value || '0'\n      });\n    } else if (item.data_type === 'CHANNEL') {\n      // Handle CHANNEL data type\n      const opcuaName = generateOpcuaName(normalizedAddress, 'CHANNEL', undefined, false, plcNumber);\n      \n      otherMappings.push({\n        plc_reg_add: normalizedAddress,\n        data_type: 'CHANNEL', // Keep original data type\n        opcua_reg_add: opcuaName,\n        description: item.description\n      });\n    } else {\n      // Handle other data types - keep original data type names\n      const opcuaName = generateOpcuaName(normalizedAddress, item.data_type, undefined, false, plcNumber);\n      \n      otherMappings.push({\n        plc_reg_add: normalizedAddress,\n        data_type: item.data_type as AddressMapping['data_type'], // Keep original data type\n        opcua_reg_add: opcuaName,\n        description: item.description\n      });\n    }\n  }\n\n  // Create address mappings for grouped boolean addresses\n  const addressMappings: AddressMapping[] = [];\n  let booleanChannelCount = 0;\n  const booleanChannelAddresses: string[] = [];\n\n  // Process grouped boolean addresses\n  for (const [baseAddress, bits] of Array.from(booleanGroups.entries())) {\n    if (bits.length > 1) {\n      // Only group if there are multiple bits - create a boolean channel with metadata\n      booleanChannelCount++;\n      const opcuaName = generateOpcuaName(baseAddress, 'BOOL', undefined, true, plcNumber);\n      \n      // Track the base address that represents this boolean channel\n      booleanChannelAddresses.push(baseAddress);\n      \n      // Create bit metadata following Python approach\n      const bit_metadata: Record<string, any> = {};\n      const bit_positions: number[] = [];\n      \n      for (const bit of bits) {\n        const bit_key = `bit_${bit.bitPosition}`; // Use the normalized bit position\n        const bitPos = parseInt(bit.bitPosition);\n        bit_metadata[bit_key] = {\n          address: bit.normalizedAddress,\n          description: bit.description,\n          bit_position: bitPos\n        };\n        bit_positions.push(bitPos);\n      }\n      \n      addressMappings.push({\n        plc_reg_add: baseAddress,\n        data_type: 'CHANNEL', // Use CHANNEL for grouped boolean channels\n        opcua_reg_add: opcuaName,\n        description: `Boolean channel for address ${baseAddress}`,\n        bit_list: bit_positions.sort((a, b) => a - b), // Store bit positions for efficient highlighting\n        metadata: {\n          bit_count: bits.length,\n          bit_mappings: bit_metadata\n        }\n      });\n    } else {\n      // Single bit, add as individual mapping\n      const bit = bits[0];\n      const opcuaName = generateOpcuaName(\n        bit.normalizedAddress.split('.')[0],\n        'BOOL',\n        bit.bitPosition,\n        false,\n        plcNumber\n      );\n      \n      addressMappings.push({\n        plc_reg_add: bit.normalizedAddress,\n        data_type: 'BOOL', // Keep original BOOL type\n        opcua_reg_add: opcuaName,\n        description: bit.description,\n        bit_list: [parseInt(bit.bitPosition)] // Store single bit position for efficient highlighting\n      });\n    }\n  }\n\n  // Add other mappings\n  addressMappings.push(...otherMappings);\n\n  return {\n    addressMappings,\n    stats: {\n      totalRecords: csvData.length,\n      validRecords: addressMappings.length,\n      skippedRecords: skippedAddresses.length,\n      booleanChannels: booleanChannelCount\n    },\n    skippedAddresses,\n    booleanChannelAddresses\n  };\n}","size_bytes":10307},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export const translations = {\n  en: {\n    sessionText: \"Session:\",\n    mainTitle: \"PLC Config File Builder\",\n    sidebarTitle: \"PLC Sessions\",\n    searchSessions: \"Search sessions...\",\n    newSessionText: \"New Session\",\n    configTitle: \"Configuration File Settings\",\n    fileNameLabel: \"Configuration File Name\",\n    descriptionLabel: \"Description\",\n    uploadTitle: \"Import Address Mappings\",\n    uploadDescription: \"Upload a CSV or TXT file containing address mapping data with the following 4 columns:\",\n    col1: \"PLC Register Name\",\n    col2: \"Data Type\", \n    col3: \"PLC Memory Address\",\n    col4: \"Comments\",\n    uploadText: \"Click to upload file\",\n    uploadSubtext: \"or drag and drop your CSV/TXT file here\",\n    progressText: \"Uploading file...\",\n    previewTitle: \"File Preview\",\n    totalRecords: \"Total Records\",\n    validRecords: \"After Modification Records\", \n    skippedRecords: \"Skipped Records\",\n    booleanChannels: \"Boolean Channels\",\n    showPreview: \"Show Preview\",\n    hidePreview: \"Hide Preview\",\n    uploadedFile: \"Uploaded File\",\n    colNaming: \"Naming\",\n    colDataType: \"Data Type\", \n    colRegisterAddress: \"Register Address\",\n    colComments: \"Comments\",\n    plcConfigTitle: \"PLC Configuration\",\n    plcNoLabel: \"PLC No\",\n    plcNameLabel: \"PLC Name\",\n    plcIpLabel: \"PLC IP Address\",\n    opcuaUrlLabel: \"OPC UA URL\",\n    overviewTitle: \"Overview Details\",\n    detailsTitle: \"PLC Register Details\",\n    totalMappings: \"Total Mappings\",\n    totalVariables: \"Total Variables Imported\",\n    memoryAreas: \"Memory Areas\",\n    datatypesFound: \"Datatypes Found\",\n    otherDatatypes: \"Other Datatypes\",\n    boolChannel: \"BOOL CHANNEL\",\n    configuredPlcs: \"Configured PLCs\",\n    status: \"Configuration Status\",\n    addMappingText: \"Add New Mapping\",\n    previewText: \"Preview JSON\",\n    exportText: \"Export JSON\",\n    plcRegHeader: \"PLC Register\",\n    dataTypeHeader: \"Data Type\",\n    opcuaRegHeader: \"OPC UA Register\",\n    actionsHeader: \"Actions\",\n    jsonModalTitle: \"JSON Preview\",\n    currentLang: \"EN\",\n    fileUploadSuccess: \"File uploaded successfully\",\n    fileUploadError: \"Error uploading file\",\n    invalidFileFormat: \"Invalid file format. Please upload CSV or TXT files.\",\n    configurationReady: \"Ready\",\n    enterRegisterAddress: \"Enter register address\",\n    enterOpcuaRegister: \"Enter OPC UA register\",\n    enterDescription: \"Enter configuration description...\"\n  },\n  ja: {\n    sessionText: \"セッション:\",\n    mainTitle: \"PLC設定ファイルビルダー\",\n    sidebarTitle: \"PLCセッション\",\n    searchSessions: \"セッションを検索...\",\n    newSessionText: \"新しいセッション\",\n    configTitle: \"設定ファイル設定\",\n    fileNameLabel: \"設定ファイル名\",\n    descriptionLabel: \"説明\",\n    uploadTitle: \"アドレスマッピングのインポート\",\n    uploadDescription: \"以下の4列を含むアドレスマッピングデータのCSVまたはTXTファイルをアップロードしてください：\",\n    col1: \"PLCレジスタ名\",\n    col2: \"データタイプ\",\n    col3: \"PLCメモリアドレス\", \n    col4: \"コメント\",\n    uploadText: \"ファイルをアップロードするにはクリック\",\n    uploadSubtext: \"またはCSV/TXTファイルをここにドラッグ＆ドロップ\",\n    progressText: \"ファイルをアップロード中...\",\n    previewTitle: \"ファイルプレビュー\",\n    totalRecords: \"総レコード数\",\n    validRecords: \"変更後レコード数\",\n    skippedRecords: \"スキップレコード数\", \n    booleanChannels: \"ブールチャンネル数\",\n    showPreview: \"プレビューを表示\",\n    hidePreview: \"プレビューを隠す\",\n    uploadedFile: \"アップロードされたファイル\",\n    colNaming: \"ネーミング\",\n    colDataType: \"データタイプ\",\n    colRegisterAddress: \"レジスタアドレス\", \n    colComments: \"コメント\",\n    plcConfigTitle: \"PLC設定\",\n    plcNoLabel: \"PLC番号\",\n    plcNameLabel: \"PLC名\",\n    plcIpLabel: \"PLC IPアドレス\",\n    opcuaUrlLabel: \"OPC UA URL\",\n    overviewTitle: \"概要詳細\",\n    detailsTitle: \"PLCレジスタ詳細\",\n    totalMappings: \"総マッピング数\",\n    totalVariables: \"インポートした総変数数\",\n    memoryAreas: \"メモリエリア\",\n    datatypesFound: \"データタイプ\",\n    otherDatatypes: \"その他のデータタイプ\",\n    boolChannel: \"BOOL CHANNEL\",\n    configuredPlcs: \"設定済みPLC\",\n    status: \"設定ステータス\",\n    addMappingText: \"新しいマッピングを追加\",\n    previewText: \"JSONプレビュー\",\n    exportText: \"JSONエクスポート\",\n    plcRegHeader: \"PLCレジスタ\",\n    dataTypeHeader: \"データタイプ\",\n    opcuaRegHeader: \"OPC UAレジスタ\",\n    actionsHeader: \"アクション\",\n    jsonModalTitle: \"JSONプレビュー\",\n    currentLang: \"JP\",\n    fileUploadSuccess: \"ファイルのアップロードが成功しました\",\n    fileUploadError: \"ファイルのアップロードエラー\",\n    invalidFileFormat: \"無効なファイル形式です。CSVまたはTXTファイルをアップロードしてください。\",\n    configurationReady: \"準備完了\",\n    enterRegisterAddress: \"レジスタアドレスを入力\",\n    enterOpcuaRegister: \"OPC UAレジスタを入力\",\n    enterDescription: \"設定の説明を入力...\"\n  }\n};\n\nexport type TranslationKey = keyof typeof translations.en;\n","size_bytes":5399},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { PlcConfigBuilder } from \"@/components/plc-config-builder\";\nimport { LanguageProvider } from \"@/hooks/use-language\";\n\nexport default function Home() {\n  return (\n    <LanguageProvider>\n      <PlcConfigBuilder />\n    </LanguageProvider>\n  );\n}\n","size_bytes":251},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/sqlite-storage.ts":{"content":"import Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { users, plcConfigurations, type User, type PlcConfiguration, type InsertUser, type InsertPlcConfigurationDomain } from \"../shared/schema\";\nimport { type IStorage } from \"./storage\";\nimport { configFileSchema } from \"../shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport class SqliteStorage implements IStorage {\n  private db: ReturnType<typeof drizzle>;\n  private sqlite: Database.Database;\n\n  constructor(dbPath: string = \"./database.sqlite\") {\n    this.sqlite = new Database(dbPath);\n    this.db = drizzle(this.sqlite);\n    this.initializeDatabase();\n  }\n\n  private initializeDatabase() {\n    // Use Drizzle to create tables instead of raw SQL\n    try {\n      // Create users table\n      this.db.run(sql`\n        CREATE TABLE IF NOT EXISTS users (\n          id TEXT PRIMARY KEY,\n          username TEXT NOT NULL UNIQUE,  \n          password TEXT NOT NULL\n        )\n      `);\n\n      // Create plc_configurations table\n      this.db.run(sql`\n        CREATE TABLE IF NOT EXISTS plc_configurations (\n          id TEXT PRIMARY KEY,\n          name TEXT NOT NULL,\n          description TEXT,\n          config_data TEXT NOT NULL,\n          created_at TEXT DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n    } catch (error) {\n      console.error(\"Database initialization failed:\", error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const newUser = { ...user, id };\n    \n    await this.db.insert(users).values(newUser);\n    return newUser as User;\n  }\n\n  async getPlcConfiguration(id: string): Promise<PlcConfiguration | undefined> {\n    const result = await this.db.select().from(plcConfigurations).where(eq(plcConfigurations.id, id));\n    const config = result[0];\n    \n    if (config) {\n      try {\n        // Parse JSON string back to object with error handling\n        return {\n          ...config,\n          config_data: JSON.parse(config.config_data as string)\n        } as PlcConfiguration;\n      } catch (error) {\n        console.error(\"Failed to parse config_data JSON:\", error);\n        return undefined;\n      }\n    }\n    return undefined;\n  }\n\n  async getAllPlcConfigurations(): Promise<PlcConfiguration[]> {\n    const result = await this.db.select().from(plcConfigurations);\n    \n    // Parse JSON strings back to objects with error handling\n    return result.map(config => {\n      try {\n        return {\n          ...config,\n          config_data: JSON.parse(config.config_data as string)\n        } as PlcConfiguration;\n      } catch (error) {\n        console.error(\"Failed to parse config_data JSON for config\", config.id, error);\n        return null;\n      }\n    }).filter(config => config !== null) as PlcConfiguration[];\n  }\n\n  async createPlcConfiguration(config: InsertPlcConfigurationDomain): Promise<PlcConfiguration> {\n    // Validate config_data before storing\n    try {\n      configFileSchema.parse(config.config_data);\n    } catch (validationError) {\n      console.error(\"Invalid config_data provided:\", validationError);\n      throw new Error(\"Invalid configuration data\");\n    }\n\n    const id = randomUUID();\n    const created_at = new Date().toISOString();\n    \n    // Convert config_data object to JSON string for SQLite storage\n    const configToInsert = {\n      ...config,\n      id,\n      created_at,\n      description: config.description || null,\n      config_data: JSON.stringify(config.config_data)\n    };\n\n    await this.db.insert(plcConfigurations).values(configToInsert);\n    \n    return {\n      ...configToInsert,\n      config_data: config.config_data // Return with parsed object\n    } as PlcConfiguration;\n  }\n\n  async updatePlcConfiguration(id: string, updateData: Partial<InsertPlcConfigurationDomain>): Promise<PlcConfiguration | undefined> {\n    try {\n      // Check if any fields are provided\n      if (Object.keys(updateData).length === 0) {\n        return this.getPlcConfiguration(id);\n      }\n\n      // Build update object only with provided keys\n      const updateToApply: any = {};\n      if (updateData.name !== undefined) updateToApply.name = updateData.name;\n      if (updateData.description !== undefined) updateToApply.description = updateData.description;\n      if (updateData.config_data !== undefined) {\n        // Validate config_data before storing\n        try {\n          configFileSchema.parse(updateData.config_data);\n          updateToApply.config_data = JSON.stringify(updateData.config_data);\n        } catch (validationError) {\n          console.error(\"Invalid config_data provided:\", validationError);\n          return undefined;\n        }\n      }\n\n      await this.db.update(plcConfigurations)\n        .set(updateToApply)\n        .where(eq(plcConfigurations.id, id));\n\n      return this.getPlcConfiguration(id);\n    } catch (error) {\n      console.error(\"Failed to update PLC configuration:\", error);\n      return undefined;\n    }\n  }\n\n  async deletePlcConfiguration(id: string): Promise<boolean> {\n    try {\n      // Check if record exists first\n      const existing = await this.getPlcConfiguration(id);\n      if (!existing) return false;\n\n      await this.db.delete(plcConfigurations).where(eq(plcConfigurations.id, id));\n      return true;\n    } catch (error) {\n      console.error(\"Failed to delete PLC configuration:\", error);\n      return false;\n    }\n  }\n}","size_bytes":5784}},"version":1}